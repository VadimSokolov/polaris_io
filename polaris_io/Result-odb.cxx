// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Result-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>
#include <odb/details/shared-ptr.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>

namespace odb
{
  // Link_Delay
  //

  access::object_traits< ::polaris::io::Link_Delay >::id_type
  access::object_traits< ::polaris::io::Link_Delay >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits< ::polaris::io::Link_Delay >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // link
    //
    t[1UL] = false;

    // dir
    //
    t[2UL] = false;

    // type
    //
    t[3UL] = false;

    // start
    //
    t[4UL] = false;

    // end
    //
    t[5UL] = false;

    // flow
    //
    t[6UL] = false;

    // time
    //
    t[7UL] = false;

    // out_link
    //
    t[8UL] = false;

    // out_flow
    //
    t[9UL] = false;

    // out_time
    //
    t[10UL] = false;

    return grew;
  }

  void access::object_traits< ::polaris::io::Link_Delay >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // link
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.link_value;
    b[n].is_null = &i.link_null;
    n++;

    // dir
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.dir_value;
    b[n].is_null = &i.dir_null;
    n++;

    // type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // start
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.start_value;
    b[n].is_null = &i.start_null;
    n++;

    // end
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.end_value;
    b[n].is_null = &i.end_null;
    n++;

    // flow
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.flow_value;
    b[n].is_null = &i.flow_null;
    n++;

    // time
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // out_link
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.out_link_value;
    b[n].is_null = &i.out_link_null;
    n++;

    // out_flow
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.out_flow_value;
    b[n].is_null = &i.out_flow_null;
    n++;

    // out_time
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.out_time_value;
    b[n].is_null = &i.out_time_null;
    n++;
  }

  void access::object_traits< ::polaris::io::Link_Delay >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::polaris::io::Link_Delay >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // link
    //
    {
      int const& v =
        o.link;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.link_value,
        is_null,
        v);
      i.link_null = is_null;
    }

    // dir
    //
    {
      int const& v =
        o.dir;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.dir_value,
        is_null,
        v);
      i.dir_null = is_null;
    }

    // type
    //
    {
      int const& v =
        o.type;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.type_value,
        is_null,
        v);
      i.type_null = is_null;
    }

    // start
    //
    {
      double const& v =
        o.start;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.start_value,
        is_null,
        v);
      i.start_null = is_null;
    }

    // end
    //
    {
      double const& v =
        o.end;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.end_value,
        is_null,
        v);
      i.end_null = is_null;
    }

    // flow
    //
    {
      double const& v =
        o.flow;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.flow_value,
        is_null,
        v);
      i.flow_null = is_null;
    }

    // time
    //
    {
      double const& v =
        o.time;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.time_value,
        is_null,
        v);
      i.time_null = is_null;
    }

    // out_link
    //
    {
      int const& v =
        o.out_link;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.out_link_value,
        is_null,
        v);
      i.out_link_null = is_null;
    }

    // out_flow
    //
    {
      double const& v =
        o.out_flow;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.out_flow_value,
        is_null,
        v);
      i.out_flow_null = is_null;
    }

    // out_time
    //
    {
      double const& v =
        o.out_time;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.out_time_value,
        is_null,
        v);
      i.out_time_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::polaris::io::Link_Delay >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // link
    //
    {
      int& v =
        o.link;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.link_value,
        i.link_null);
    }

    // dir
    //
    {
      int& v =
        o.dir;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.dir_value,
        i.dir_null);
    }

    // type
    //
    {
      int& v =
        o.type;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // start
    //
    {
      double& v =
        o.start;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.start_value,
        i.start_null);
    }

    // end
    //
    {
      double& v =
        o.end;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.end_value,
        i.end_null);
    }

    // flow
    //
    {
      double& v =
        o.flow;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.flow_value,
        i.flow_null);
    }

    // time
    //
    {
      double& v =
        o.time;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // out_link
    //
    {
      int& v =
        o.out_link;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.out_link_value,
        i.out_link_null);
    }

    // out_flow
    //
    {
      double& v =
        o.out_flow;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.out_flow_value,
        i.out_flow_null);
    }

    // out_time
    //
    {
      double& v =
        o.out_time;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.out_time_value,
        i.out_time_null);
    }
  }

  void access::object_traits< ::polaris::io::Link_Delay >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::polaris::io::Link_Delay >::container_statement_cache_type
  {
    container_statement_cache_type (sqlite::connection&)
    {
    }
  };

  const char access::object_traits< ::polaris::io::Link_Delay >::persist_statement[] =
  "INSERT INTO \"Link_Delay\" ("
  "\"auto_id\","
  "\"link\","
  "\"dir\","
  "\"type\","
  "\"start\","
  "\"end\","
  "\"flow\","
  "\"time\","
  "\"out_link\","
  "\"out_flow\","
  "\"out_time\")"
  " VALUES (?,?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits< ::polaris::io::Link_Delay >::find_statement[] =
  "SELECT "
  "\"Link_Delay\".\"auto_id\","
  "\"Link_Delay\".\"link\","
  "\"Link_Delay\".\"dir\","
  "\"Link_Delay\".\"type\","
  "\"Link_Delay\".\"start\","
  "\"Link_Delay\".\"end\","
  "\"Link_Delay\".\"flow\","
  "\"Link_Delay\".\"time\","
  "\"Link_Delay\".\"out_link\","
  "\"Link_Delay\".\"out_flow\","
  "\"Link_Delay\".\"out_time\""
  " FROM \"Link_Delay\""
  " WHERE \"Link_Delay\".\"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Link_Delay >::update_statement[] =
  "UPDATE \"Link_Delay\" SET "
  "\"link\"=?,"
  "\"dir\"=?,"
  "\"type\"=?,"
  "\"start\"=?,"
  "\"end\"=?,"
  "\"flow\"=?,"
  "\"time\"=?,"
  "\"out_link\"=?,"
  "\"out_flow\"=?,"
  "\"out_time\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Link_Delay >::erase_statement[] =
  "DELETE FROM \"Link_Delay\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Link_Delay >::query_statement[] =
  "SELECT "
  "\"Link_Delay\".\"auto_id\","
  "\"Link_Delay\".\"link\","
  "\"Link_Delay\".\"dir\","
  "\"Link_Delay\".\"type\","
  "\"Link_Delay\".\"start\","
  "\"Link_Delay\".\"end\","
  "\"Link_Delay\".\"flow\","
  "\"Link_Delay\".\"time\","
  "\"Link_Delay\".\"out_link\","
  "\"Link_Delay\".\"out_flow\","
  "\"Link_Delay\".\"out_time\""
  " FROM \"Link_Delay\""
  " ";

  const char access::object_traits< ::polaris::io::Link_Delay >::erase_query_statement[] =
  "DELETE FROM \"Link_Delay\""
  " ";

  const char access::object_traits< ::polaris::io::Link_Delay >::table_name[] =
  "\"Link_Delay\"";

  void access::object_traits< ::polaris::io::Link_Delay >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits< ::polaris::io::Link_Delay >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
  }

  void access::object_traits< ::polaris::io::Link_Delay >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits< ::polaris::io::Link_Delay >::pointer_type
  access::object_traits< ::polaris::io::Link_Delay >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::polaris::io::Link_Delay >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::insert_guard ig (
      reference_cache_traits::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::polaris::io::Link_Delay >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::polaris::io::Link_Delay >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits< ::polaris::io::Link_Delay >::object_type >
  access::object_traits< ::polaris::io::Link_Delay >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::polaris::io::Link_Delay >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits< ::polaris::io::Link_Delay >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Link_Delay\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Link_Delay\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"link\" INTEGER NOT NULL,\n"
                      "  \"dir\" INTEGER NOT NULL,\n"
                      "  \"type\" INTEGER NOT NULL,\n"
                      "  \"start\" REAL,\n"
                      "  \"end\" REAL,\n"
                      "  \"flow\" REAL,\n"
                      "  \"time\" REAL,\n"
                      "  \"out_link\" INTEGER NOT NULL,\n"
                      "  \"out_flow\" REAL,\n"
                      "  \"out_time\" REAL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Link_Delay_ (
    "Result",
    &access::object_traits< ::polaris::io::Link_Delay >::create_schema);

  // Performance
  //

  access::object_traits< ::polaris::io::Performance >::id_type
  access::object_traits< ::polaris::io::Performance >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits< ::polaris::io::Performance >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // speed
    //
    t[1UL] = false;

    // delay
    //
    t[2UL] = false;

    // density
    //
    t[3UL] = false;

    // max_den
    //
    t[4UL] = false;

    // ratio
    //
    t[5UL] = false;

    // queue
    //
    t[6UL] = false;

    // max_que
    //
    t[7UL] = false;

    // fail
    //
    t[8UL] = false;

    return grew;
  }

  void access::object_traits< ::polaris::io::Performance >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // speed
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.speed_value;
    b[n].is_null = &i.speed_null;
    n++;

    // delay
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.delay_value;
    b[n].is_null = &i.delay_null;
    n++;

    // density
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.density_value;
    b[n].is_null = &i.density_null;
    n++;

    // max_den
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.max_den_value;
    b[n].is_null = &i.max_den_null;
    n++;

    // ratio
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.ratio_value;
    b[n].is_null = &i.ratio_null;
    n++;

    // queue
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.queue_value;
    b[n].is_null = &i.queue_null;
    n++;

    // max_que
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.max_que_value;
    b[n].is_null = &i.max_que_null;
    n++;

    // fail
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.fail_value;
    b[n].is_null = &i.fail_null;
    n++;
  }

  void access::object_traits< ::polaris::io::Performance >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::polaris::io::Performance >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // speed
    //
    {
      double const& v =
        o.speed;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.speed_value,
        is_null,
        v);
      i.speed_null = is_null;
    }

    // delay
    //
    {
      double const& v =
        o.delay;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.delay_value,
        is_null,
        v);
      i.delay_null = is_null;
    }

    // density
    //
    {
      double const& v =
        o.density;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.density_value,
        is_null,
        v);
      i.density_null = is_null;
    }

    // max_den
    //
    {
      double const& v =
        o.max_den;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.max_den_value,
        is_null,
        v);
      i.max_den_null = is_null;
    }

    // ratio
    //
    {
      double const& v =
        o.ratio;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.ratio_value,
        is_null,
        v);
      i.ratio_null = is_null;
    }

    // queue
    //
    {
      double const& v =
        o.queue;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.queue_value,
        is_null,
        v);
      i.queue_null = is_null;
    }

    // max_que
    //
    {
      int const& v =
        o.max_que;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.max_que_value,
        is_null,
        v);
      i.max_que_null = is_null;
    }

    // fail
    //
    {
      int const& v =
        o.fail;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.fail_value,
        is_null,
        v);
      i.fail_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::polaris::io::Performance >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // speed
    //
    {
      double& v =
        o.speed;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.speed_value,
        i.speed_null);
    }

    // delay
    //
    {
      double& v =
        o.delay;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.delay_value,
        i.delay_null);
    }

    // density
    //
    {
      double& v =
        o.density;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.density_value,
        i.density_null);
    }

    // max_den
    //
    {
      double& v =
        o.max_den;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.max_den_value,
        i.max_den_null);
    }

    // ratio
    //
    {
      double& v =
        o.ratio;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.ratio_value,
        i.ratio_null);
    }

    // queue
    //
    {
      double& v =
        o.queue;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.queue_value,
        i.queue_null);
    }

    // max_que
    //
    {
      int& v =
        o.max_que;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.max_que_value,
        i.max_que_null);
    }

    // fail
    //
    {
      int& v =
        o.fail;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.fail_value,
        i.fail_null);
    }
  }

  void access::object_traits< ::polaris::io::Performance >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::polaris::io::Performance >::container_statement_cache_type
  {
    container_statement_cache_type (sqlite::connection&)
    {
    }
  };

  const char access::object_traits< ::polaris::io::Performance >::persist_statement[] =
  "INSERT INTO \"Performance\" ("
  "\"auto_id\","
  "\"speed\","
  "\"delay\","
  "\"density\","
  "\"max_den\","
  "\"ratio\","
  "\"queue\","
  "\"max_que\","
  "\"fail\")"
  " VALUES (?,?,?,?,?,?,?,?,?)";

  const char access::object_traits< ::polaris::io::Performance >::find_statement[] =
  "SELECT "
  "\"Performance\".\"auto_id\","
  "\"Performance\".\"speed\","
  "\"Performance\".\"delay\","
  "\"Performance\".\"density\","
  "\"Performance\".\"max_den\","
  "\"Performance\".\"ratio\","
  "\"Performance\".\"queue\","
  "\"Performance\".\"max_que\","
  "\"Performance\".\"fail\""
  " FROM \"Performance\""
  " WHERE \"Performance\".\"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Performance >::update_statement[] =
  "UPDATE \"Performance\" SET "
  "\"speed\"=?,"
  "\"delay\"=?,"
  "\"density\"=?,"
  "\"max_den\"=?,"
  "\"ratio\"=?,"
  "\"queue\"=?,"
  "\"max_que\"=?,"
  "\"fail\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Performance >::erase_statement[] =
  "DELETE FROM \"Performance\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Performance >::query_statement[] =
  "SELECT "
  "\"Performance\".\"auto_id\","
  "\"Performance\".\"speed\","
  "\"Performance\".\"delay\","
  "\"Performance\".\"density\","
  "\"Performance\".\"max_den\","
  "\"Performance\".\"ratio\","
  "\"Performance\".\"queue\","
  "\"Performance\".\"max_que\","
  "\"Performance\".\"fail\""
  " FROM \"Performance\""
  " ";

  const char access::object_traits< ::polaris::io::Performance >::erase_query_statement[] =
  "DELETE FROM \"Performance\""
  " ";

  const char access::object_traits< ::polaris::io::Performance >::table_name[] =
  "\"Performance\"";

  void access::object_traits< ::polaris::io::Performance >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits< ::polaris::io::Performance >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
  }

  void access::object_traits< ::polaris::io::Performance >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits< ::polaris::io::Performance >::pointer_type
  access::object_traits< ::polaris::io::Performance >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::polaris::io::Performance >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::insert_guard ig (
      reference_cache_traits::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::polaris::io::Performance >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::polaris::io::Performance >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits< ::polaris::io::Performance >::object_type >
  access::object_traits< ::polaris::io::Performance >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::polaris::io::Performance >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits< ::polaris::io::Performance >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Performance\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Performance\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"speed\" REAL,\n"
                      "  \"delay\" REAL,\n"
                      "  \"density\" REAL,\n"
                      "  \"max_den\" REAL,\n"
                      "  \"ratio\" REAL,\n"
                      "  \"queue\" REAL,\n"
                      "  \"max_que\" INTEGER NOT NULL,\n"
                      "  \"fail\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Performance_ (
    "Result",
    &access::object_traits< ::polaris::io::Performance >::create_schema);

  // Problem
  //

  access::object_traits< ::polaris::io::Problem >::id_type
  access::object_traits< ::polaris::io::Problem >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        id,
        i.problem_value,
        i.problem_null);
    }

    return id;
  }

  bool access::object_traits< ::polaris::io::Problem >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // problem
    //
    t[0UL] = false;

    // time
    //
    t[1UL] = false;

    // link
    //
    t[2UL] = false;

    // dir
    //
    t[3UL] = false;

    // lane
    //
    t[4UL] = false;

    // offset
    //
    t[5UL] = false;

    // route
    //
    t[6UL] = false;

    // survey
    //
    t[7UL] = false;

    return grew;
  }

  void access::object_traits< ::polaris::io::Problem >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // problem
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.problem_value;
      b[n].is_null = &i.problem_null;
      n++;
    }

    // time
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // link
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.link_value;
    b[n].is_null = &i.link_null;
    n++;

    // dir
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.dir_value;
    b[n].is_null = &i.dir_null;
    n++;

    // lane
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.lane_value;
    b[n].is_null = &i.lane_null;
    n++;

    // offset
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.offset_value;
    b[n].is_null = &i.offset_null;
    n++;

    // route
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.route_value;
    b[n].is_null = &i.route_null;
    n++;

    // survey
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.survey_value;
    b[n].is_null = &i.survey_null;
    n++;
  }

  void access::object_traits< ::polaris::io::Problem >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::polaris::io::Problem >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // problem
    //
    if (sk == statement_insert)
    {
      int const& v =
        o.problem;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.problem_value,
        is_null,
        v);
      i.problem_null = is_null;
    }

    // time
    //
    {
      double const& v =
        o.time;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.time_value,
        is_null,
        v);
      i.time_null = is_null;
    }

    // link
    //
    {
      int const& v =
        o.link;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.link_value,
        is_null,
        v);
      i.link_null = is_null;
    }

    // dir
    //
    {
      int const& v =
        o.dir;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.dir_value,
        is_null,
        v);
      i.dir_null = is_null;
    }

    // lane
    //
    {
      int const& v =
        o.lane;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.lane_value,
        is_null,
        v);
      i.lane_null = is_null;
    }

    // offset
    //
    {
      double const& v =
        o.offset;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.offset_value,
        is_null,
        v);
      i.offset_null = is_null;
    }

    // route
    //
    {
      int const& v =
        o.route;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.route_value,
        is_null,
        v);
      i.route_null = is_null;
    }

    // survey
    //
    {
      int const& v =
        o.survey;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.survey_value,
        is_null,
        v);
      i.survey_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::polaris::io::Problem >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // problem
    //
    {
      int& v =
        o.problem;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.problem_value,
        i.problem_null);
    }

    // time
    //
    {
      double& v =
        o.time;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // link
    //
    {
      int& v =
        o.link;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.link_value,
        i.link_null);
    }

    // dir
    //
    {
      int& v =
        o.dir;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.dir_value,
        i.dir_null);
    }

    // lane
    //
    {
      int& v =
        o.lane;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.lane_value,
        i.lane_null);
    }

    // offset
    //
    {
      double& v =
        o.offset;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.offset_value,
        i.offset_null);
    }

    // route
    //
    {
      int& v =
        o.route;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.route_value,
        i.route_null);
    }

    // survey
    //
    {
      int& v =
        o.survey;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.survey_value,
        i.survey_null);
    }
  }

  void access::object_traits< ::polaris::io::Problem >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::polaris::io::Problem >::container_statement_cache_type
  {
    container_statement_cache_type (sqlite::connection&)
    {
    }
  };

  const char access::object_traits< ::polaris::io::Problem >::persist_statement[] =
  "INSERT INTO \"Problem\" ("
  "\"problem\","
  "\"time\","
  "\"link\","
  "\"dir\","
  "\"lane\","
  "\"offset\","
  "\"route\","
  "\"survey\")"
  " VALUES (?,?,?,?,?,?,?,?)";

  const char access::object_traits< ::polaris::io::Problem >::find_statement[] =
  "SELECT "
  "\"Problem\".\"problem\","
  "\"Problem\".\"time\","
  "\"Problem\".\"link\","
  "\"Problem\".\"dir\","
  "\"Problem\".\"lane\","
  "\"Problem\".\"offset\","
  "\"Problem\".\"route\","
  "\"Problem\".\"survey\""
  " FROM \"Problem\""
  " WHERE \"Problem\".\"problem\"=?";

  const char access::object_traits< ::polaris::io::Problem >::update_statement[] =
  "UPDATE \"Problem\" SET "
  "\"time\"=?,"
  "\"link\"=?,"
  "\"dir\"=?,"
  "\"lane\"=?,"
  "\"offset\"=?,"
  "\"route\"=?,"
  "\"survey\"=?"
  " WHERE \"problem\"=?";

  const char access::object_traits< ::polaris::io::Problem >::erase_statement[] =
  "DELETE FROM \"Problem\""
  " WHERE \"problem\"=?";

  const char access::object_traits< ::polaris::io::Problem >::query_statement[] =
  "SELECT "
  "\"Problem\".\"problem\","
  "\"Problem\".\"time\","
  "\"Problem\".\"link\","
  "\"Problem\".\"dir\","
  "\"Problem\".\"lane\","
  "\"Problem\".\"offset\","
  "\"Problem\".\"route\","
  "\"Problem\".\"survey\""
  " FROM \"Problem\""
  " ";

  const char access::object_traits< ::polaris::io::Problem >::erase_query_statement[] =
  "DELETE FROM \"Problem\""
  " ";

  const char access::object_traits< ::polaris::io::Problem >::table_name[] =
  "\"Problem\"";

  void access::object_traits< ::polaris::io::Problem >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits< ::polaris::io::Problem >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.problem);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
  }

  void access::object_traits< ::polaris::io::Problem >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits< ::polaris::io::Problem >::pointer_type
  access::object_traits< ::polaris::io::Problem >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::polaris::io::Problem >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::insert_guard ig (
      reference_cache_traits::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::polaris::io::Problem >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.problem);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::polaris::io::Problem >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits< ::polaris::io::Problem >::object_type >
  access::object_traits< ::polaris::io::Problem >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::polaris::io::Problem >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits< ::polaris::io::Problem >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Problem\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Problem\" (\n"
                      "  \"problem\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"time\" REAL,\n"
                      "  \"link\" INTEGER NOT NULL,\n"
                      "  \"dir\" INTEGER NOT NULL,\n"
                      "  \"lane\" INTEGER NOT NULL,\n"
                      "  \"offset\" REAL,\n"
                      "  \"route\" INTEGER NOT NULL,\n"
                      "  \"survey\" INTEGER NOT NULL)");
          db.execute ("CREATE INDEX \"Problem_problem_i\"\n"
                      "  ON \"Problem\" (\"problem\")");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Problem_ (
    "Result",
    &access::object_traits< ::polaris::io::Problem >::create_schema);

  // Skim
  //

  access::object_traits< ::polaris::io::Skim >::id_type
  access::object_traits< ::polaris::io::Skim >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits< ::polaris::io::Skim >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // time
    //
    t[1UL] = false;

    // walk
    //
    t[2UL] = false;

    // drive
    //
    t[3UL] = false;

    // transit
    //
    t[4UL] = false;

    // wait
    //
    t[5UL] = false;

    // other
    //
    t[6UL] = false;

    // length
    //
    t[7UL] = false;

    // cost
    //
    t[8UL] = false;

    // impedance
    //
    t[9UL] = false;

    return grew;
  }

  void access::object_traits< ::polaris::io::Skim >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // time
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // walk
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.walk_value;
    b[n].is_null = &i.walk_null;
    n++;

    // drive
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.drive_value;
    b[n].is_null = &i.drive_null;
    n++;

    // transit
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.transit_value;
    b[n].is_null = &i.transit_null;
    n++;

    // wait
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.wait_value;
    b[n].is_null = &i.wait_null;
    n++;

    // other
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.other_value;
    b[n].is_null = &i.other_null;
    n++;

    // length
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.length_value;
    b[n].is_null = &i.length_null;
    n++;

    // cost
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.cost_value;
    b[n].is_null = &i.cost_null;
    n++;

    // impedance
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.impedance_value;
    b[n].is_null = &i.impedance_null;
    n++;
  }

  void access::object_traits< ::polaris::io::Skim >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::polaris::io::Skim >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // time
    //
    {
      double const& v =
        o.time;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.time_value,
        is_null,
        v);
      i.time_null = is_null;
    }

    // walk
    //
    {
      double const& v =
        o.walk;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.walk_value,
        is_null,
        v);
      i.walk_null = is_null;
    }

    // drive
    //
    {
      double const& v =
        o.drive;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.drive_value,
        is_null,
        v);
      i.drive_null = is_null;
    }

    // transit
    //
    {
      double const& v =
        o.transit;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.transit_value,
        is_null,
        v);
      i.transit_null = is_null;
    }

    // wait
    //
    {
      double const& v =
        o.wait;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.wait_value,
        is_null,
        v);
      i.wait_null = is_null;
    }

    // other
    //
    {
      double const& v =
        o.other;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.other_value,
        is_null,
        v);
      i.other_null = is_null;
    }

    // length
    //
    {
      double const& v =
        o.length;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.length_value,
        is_null,
        v);
      i.length_null = is_null;
    }

    // cost
    //
    {
      double const& v =
        o.cost;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.cost_value,
        is_null,
        v);
      i.cost_null = is_null;
    }

    // impedance
    //
    {
      int const& v =
        o.impedance;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.impedance_value,
        is_null,
        v);
      i.impedance_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::polaris::io::Skim >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // time
    //
    {
      double& v =
        o.time;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // walk
    //
    {
      double& v =
        o.walk;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.walk_value,
        i.walk_null);
    }

    // drive
    //
    {
      double& v =
        o.drive;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.drive_value,
        i.drive_null);
    }

    // transit
    //
    {
      double& v =
        o.transit;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.transit_value,
        i.transit_null);
    }

    // wait
    //
    {
      double& v =
        o.wait;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.wait_value,
        i.wait_null);
    }

    // other
    //
    {
      double& v =
        o.other;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.other_value,
        i.other_null);
    }

    // length
    //
    {
      double& v =
        o.length;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.length_value,
        i.length_null);
    }

    // cost
    //
    {
      double& v =
        o.cost;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.cost_value,
        i.cost_null);
    }

    // impedance
    //
    {
      int& v =
        o.impedance;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.impedance_value,
        i.impedance_null);
    }
  }

  void access::object_traits< ::polaris::io::Skim >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::polaris::io::Skim >::container_statement_cache_type
  {
    container_statement_cache_type (sqlite::connection&)
    {
    }
  };

  const char access::object_traits< ::polaris::io::Skim >::persist_statement[] =
  "INSERT INTO \"Skim\" ("
  "\"auto_id\","
  "\"time\","
  "\"walk\","
  "\"drive\","
  "\"transit\","
  "\"wait\","
  "\"other\","
  "\"length\","
  "\"cost\","
  "\"impedance\")"
  " VALUES (?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits< ::polaris::io::Skim >::find_statement[] =
  "SELECT "
  "\"Skim\".\"auto_id\","
  "\"Skim\".\"time\","
  "\"Skim\".\"walk\","
  "\"Skim\".\"drive\","
  "\"Skim\".\"transit\","
  "\"Skim\".\"wait\","
  "\"Skim\".\"other\","
  "\"Skim\".\"length\","
  "\"Skim\".\"cost\","
  "\"Skim\".\"impedance\""
  " FROM \"Skim\""
  " WHERE \"Skim\".\"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Skim >::update_statement[] =
  "UPDATE \"Skim\" SET "
  "\"time\"=?,"
  "\"walk\"=?,"
  "\"drive\"=?,"
  "\"transit\"=?,"
  "\"wait\"=?,"
  "\"other\"=?,"
  "\"length\"=?,"
  "\"cost\"=?,"
  "\"impedance\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Skim >::erase_statement[] =
  "DELETE FROM \"Skim\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Skim >::query_statement[] =
  "SELECT "
  "\"Skim\".\"auto_id\","
  "\"Skim\".\"time\","
  "\"Skim\".\"walk\","
  "\"Skim\".\"drive\","
  "\"Skim\".\"transit\","
  "\"Skim\".\"wait\","
  "\"Skim\".\"other\","
  "\"Skim\".\"length\","
  "\"Skim\".\"cost\","
  "\"Skim\".\"impedance\""
  " FROM \"Skim\""
  " ";

  const char access::object_traits< ::polaris::io::Skim >::erase_query_statement[] =
  "DELETE FROM \"Skim\""
  " ";

  const char access::object_traits< ::polaris::io::Skim >::table_name[] =
  "\"Skim\"";

  void access::object_traits< ::polaris::io::Skim >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits< ::polaris::io::Skim >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
  }

  void access::object_traits< ::polaris::io::Skim >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits< ::polaris::io::Skim >::pointer_type
  access::object_traits< ::polaris::io::Skim >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::polaris::io::Skim >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::insert_guard ig (
      reference_cache_traits::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::polaris::io::Skim >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::polaris::io::Skim >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits< ::polaris::io::Skim >::object_type >
  access::object_traits< ::polaris::io::Skim >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::polaris::io::Skim >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits< ::polaris::io::Skim >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Skim\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Skim\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"time\" REAL,\n"
                      "  \"walk\" REAL,\n"
                      "  \"drive\" REAL,\n"
                      "  \"transit\" REAL,\n"
                      "  \"wait\" REAL,\n"
                      "  \"other\" REAL,\n"
                      "  \"length\" REAL,\n"
                      "  \"cost\" REAL,\n"
                      "  \"impedance\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Skim_ (
    "Result",
    &access::object_traits< ::polaris::io::Skim >::create_schema);

  // Event
  //

  access::object_traits< ::polaris::io::Event >::id_type
  access::object_traits< ::polaris::io::Event >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits< ::polaris::io::Event >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // hhold
    //
    t[1UL] = false;

    // person
    //
    t[2UL] = false;

    // tour
    //
    t[3UL] = false;

    // trip
    //
    t[4UL] = false;

    // mode
    //
    t[5UL] = false;

    // type
    //
    t[6UL] = false;

    // schedule
    //
    t[7UL] = false;

    // actual
    //
    t[8UL] = false;

    // link
    //
    t[9UL] = false;

    // dir
    //
    t[10UL] = false;

    // lane
    //
    t[11UL] = false;

    // offset
    //
    t[12UL] = false;

    // route
    //
    t[13UL] = false;

    return grew;
  }

  void access::object_traits< ::polaris::io::Event >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // hhold
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.hhold_value;
    b[n].is_null = &i.hhold_null;
    n++;

    // person
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.person_value;
    b[n].is_null = &i.person_null;
    n++;

    // tour
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.tour_value;
    b[n].is_null = &i.tour_null;
    n++;

    // trip
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.trip_value;
    b[n].is_null = &i.trip_null;
    n++;

    // mode
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.mode_value;
    b[n].is_null = &i.mode_null;
    n++;

    // type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // schedule
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.schedule_value;
    b[n].is_null = &i.schedule_null;
    n++;

    // actual
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.actual_value;
    b[n].is_null = &i.actual_null;
    n++;

    // link
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.link_value;
    b[n].is_null = &i.link_null;
    n++;

    // dir
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.dir_value;
    b[n].is_null = &i.dir_null;
    n++;

    // lane
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.lane_value;
    b[n].is_null = &i.lane_null;
    n++;

    // offset
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.offset_value;
    b[n].is_null = &i.offset_null;
    n++;

    // route
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.route_value;
    b[n].is_null = &i.route_null;
    n++;
  }

  void access::object_traits< ::polaris::io::Event >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::polaris::io::Event >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // hhold
    //
    {
      int const& v =
        o.hhold;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.hhold_value,
        is_null,
        v);
      i.hhold_null = is_null;
    }

    // person
    //
    {
      int const& v =
        o.person;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.person_value,
        is_null,
        v);
      i.person_null = is_null;
    }

    // tour
    //
    {
      int const& v =
        o.tour;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.tour_value,
        is_null,
        v);
      i.tour_null = is_null;
    }

    // trip
    //
    {
      int const& v =
        o.trip;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.trip_value,
        is_null,
        v);
      i.trip_null = is_null;
    }

    // mode
    //
    {
      int const& v =
        o.mode;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.mode_value,
        is_null,
        v);
      i.mode_null = is_null;
    }

    // type
    //
    {
      int const& v =
        o.type;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.type_value,
        is_null,
        v);
      i.type_null = is_null;
    }

    // schedule
    //
    {
      double const& v =
        o.schedule;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.schedule_value,
        is_null,
        v);
      i.schedule_null = is_null;
    }

    // actual
    //
    {
      double const& v =
        o.actual;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.actual_value,
        is_null,
        v);
      i.actual_null = is_null;
    }

    // link
    //
    {
      int const& v =
        o.link;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.link_value,
        is_null,
        v);
      i.link_null = is_null;
    }

    // dir
    //
    {
      int const& v =
        o.dir;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.dir_value,
        is_null,
        v);
      i.dir_null = is_null;
    }

    // lane
    //
    {
      int const& v =
        o.lane;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.lane_value,
        is_null,
        v);
      i.lane_null = is_null;
    }

    // offset
    //
    {
      double const& v =
        o.offset;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.offset_value,
        is_null,
        v);
      i.offset_null = is_null;
    }

    // route
    //
    {
      int const& v =
        o.route;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.route_value,
        is_null,
        v);
      i.route_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::polaris::io::Event >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // hhold
    //
    {
      int& v =
        o.hhold;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.hhold_value,
        i.hhold_null);
    }

    // person
    //
    {
      int& v =
        o.person;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.person_value,
        i.person_null);
    }

    // tour
    //
    {
      int& v =
        o.tour;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.tour_value,
        i.tour_null);
    }

    // trip
    //
    {
      int& v =
        o.trip;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.trip_value,
        i.trip_null);
    }

    // mode
    //
    {
      int& v =
        o.mode;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.mode_value,
        i.mode_null);
    }

    // type
    //
    {
      int& v =
        o.type;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // schedule
    //
    {
      double& v =
        o.schedule;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.schedule_value,
        i.schedule_null);
    }

    // actual
    //
    {
      double& v =
        o.actual;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.actual_value,
        i.actual_null);
    }

    // link
    //
    {
      int& v =
        o.link;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.link_value,
        i.link_null);
    }

    // dir
    //
    {
      int& v =
        o.dir;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.dir_value,
        i.dir_null);
    }

    // lane
    //
    {
      int& v =
        o.lane;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.lane_value,
        i.lane_null);
    }

    // offset
    //
    {
      double& v =
        o.offset;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.offset_value,
        i.offset_null);
    }

    // route
    //
    {
      int& v =
        o.route;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.route_value,
        i.route_null);
    }
  }

  void access::object_traits< ::polaris::io::Event >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::polaris::io::Event >::container_statement_cache_type
  {
    container_statement_cache_type (sqlite::connection&)
    {
    }
  };

  const char access::object_traits< ::polaris::io::Event >::persist_statement[] =
  "INSERT INTO \"Event\" ("
  "\"auto_id\","
  "\"hhold\","
  "\"person\","
  "\"tour\","
  "\"trip\","
  "\"mode\","
  "\"type\","
  "\"schedule\","
  "\"actual\","
  "\"link\","
  "\"dir\","
  "\"lane\","
  "\"offset\","
  "\"route\")"
  " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits< ::polaris::io::Event >::find_statement[] =
  "SELECT "
  "\"Event\".\"auto_id\","
  "\"Event\".\"hhold\","
  "\"Event\".\"person\","
  "\"Event\".\"tour\","
  "\"Event\".\"trip\","
  "\"Event\".\"mode\","
  "\"Event\".\"type\","
  "\"Event\".\"schedule\","
  "\"Event\".\"actual\","
  "\"Event\".\"link\","
  "\"Event\".\"dir\","
  "\"Event\".\"lane\","
  "\"Event\".\"offset\","
  "\"Event\".\"route\""
  " FROM \"Event\""
  " WHERE \"Event\".\"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Event >::update_statement[] =
  "UPDATE \"Event\" SET "
  "\"hhold\"=?,"
  "\"person\"=?,"
  "\"tour\"=?,"
  "\"trip\"=?,"
  "\"mode\"=?,"
  "\"type\"=?,"
  "\"schedule\"=?,"
  "\"actual\"=?,"
  "\"link\"=?,"
  "\"dir\"=?,"
  "\"lane\"=?,"
  "\"offset\"=?,"
  "\"route\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Event >::erase_statement[] =
  "DELETE FROM \"Event\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits< ::polaris::io::Event >::query_statement[] =
  "SELECT "
  "\"Event\".\"auto_id\","
  "\"Event\".\"hhold\","
  "\"Event\".\"person\","
  "\"Event\".\"tour\","
  "\"Event\".\"trip\","
  "\"Event\".\"mode\","
  "\"Event\".\"type\","
  "\"Event\".\"schedule\","
  "\"Event\".\"actual\","
  "\"Event\".\"link\","
  "\"Event\".\"dir\","
  "\"Event\".\"lane\","
  "\"Event\".\"offset\","
  "\"Event\".\"route\""
  " FROM \"Event\""
  " ";

  const char access::object_traits< ::polaris::io::Event >::erase_query_statement[] =
  "DELETE FROM \"Event\""
  " ";

  const char access::object_traits< ::polaris::io::Event >::table_name[] =
  "\"Event\"";

  void access::object_traits< ::polaris::io::Event >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits< ::polaris::io::Event >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
  }

  void access::object_traits< ::polaris::io::Event >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits< ::polaris::io::Event >::pointer_type
  access::object_traits< ::polaris::io::Event >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::polaris::io::Event >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::insert_guard ig (
      reference_cache_traits::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::polaris::io::Event >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::polaris::io::Event >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits< ::polaris::io::Event >::object_type >
  access::object_traits< ::polaris::io::Event >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::polaris::io::Event >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits< ::polaris::io::Event >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Event\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Event\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"hhold\" INTEGER NOT NULL,\n"
                      "  \"person\" INTEGER NOT NULL,\n"
                      "  \"tour\" INTEGER NOT NULL,\n"
                      "  \"trip\" INTEGER NOT NULL,\n"
                      "  \"mode\" INTEGER NOT NULL,\n"
                      "  \"type\" INTEGER NOT NULL,\n"
                      "  \"schedule\" REAL,\n"
                      "  \"actual\" REAL,\n"
                      "  \"link\" INTEGER NOT NULL,\n"
                      "  \"dir\" INTEGER NOT NULL,\n"
                      "  \"lane\" INTEGER NOT NULL,\n"
                      "  \"offset\" REAL,\n"
                      "  \"route\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Event_ (
    "Result",
    &access::object_traits< ::polaris::io::Event >::create_schema);
}

#include <odb/post.hxx>
