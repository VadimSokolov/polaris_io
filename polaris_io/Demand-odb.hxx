// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef DEMAND_ODB_HXX
#define DEMAND_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20100UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Demand.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/tr1/wrapper-traits.hxx>
#include <odb/tr1/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/buffer.hxx>
#include <odb/details/unused.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // Selection
  //
  template <>
  struct class_traits< ::polaris::io::Selection >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Selection, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // hhold
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hhold_type_;

    static const hhold_type_ hhold;

    // person
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    person_type_;

    static const person_type_ person;

    // tour
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    tour_type_;

    static const tour_type_ tour;

    // trip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    trip_type_;

    static const trip_type_ trip;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;

    // partition
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    partition_type_;

    static const partition_type_ partition;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Selection, A >::auto_id_type_
  query_columns< ::polaris::io::Selection, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Selection, A >::hhold_type_
  query_columns< ::polaris::io::Selection, A >::
  hhold (A::table_name, "\"hhold\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Selection, A >::person_type_
  query_columns< ::polaris::io::Selection, A >::
  person (A::table_name, "\"person\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Selection, A >::tour_type_
  query_columns< ::polaris::io::Selection, A >::
  tour (A::table_name, "\"tour\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Selection, A >::trip_type_
  query_columns< ::polaris::io::Selection, A >::
  trip (A::table_name, "\"trip\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Selection, A >::type_type_
  query_columns< ::polaris::io::Selection, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Selection, A >::partition_type_
  query_columns< ::polaris::io::Selection, A >::
  partition (A::table_name, "\"partition\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Selection, A >:
    query_columns< ::polaris::io::Selection, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Selection >
  {
    public:
    typedef ::polaris::io::Selection object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Selection > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // hhold
      //
      long long hhold_value;
      bool hhold_null;

      // person
      //
      long long person_value;
      bool person_null;

      // tour
      //
      long long tour_value;
      bool tour_null;

      // trip
      //
      long long trip_value;
      bool trip_null;

      // type
      //
      long long type_value;
      bool type_null;

      // partition
      //
      long long partition_value;
      bool partition_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Household
  //
  template <>
  struct class_traits< ::polaris::io::Household >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Household, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // hhold
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hhold_type_;

    static const hhold_type_ hhold;

    // location
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    location_type_;

    static const location_type_ location;

    // persons
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    persons_type_;

    static const persons_type_ persons;

    // workers
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    workers_type_;

    static const workers_type_ workers;

    // vehicles
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    vehicles_type_;

    static const vehicles_type_ vehicles;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;

    // partition
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    partition_type_;

    static const partition_type_ partition;

    // person
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    person_type_;

    static const person_type_ person;

    // age
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    age_type_;

    static const age_type_ age;

    // relate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    relate_type_;

    static const relate_type_ relate;

    // gender
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    gender_type_;

    static const gender_type_ gender;

    // work
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    work_type_;

    static const work_type_ work;

    // drive
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    drive_type_;

    static const drive_type_ drive;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::auto_id_type_
  query_columns< ::polaris::io::Household, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::hhold_type_
  query_columns< ::polaris::io::Household, A >::
  hhold (A::table_name, "\"hhold\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::location_type_
  query_columns< ::polaris::io::Household, A >::
  location (A::table_name, "\"location\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::persons_type_
  query_columns< ::polaris::io::Household, A >::
  persons (A::table_name, "\"persons\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::workers_type_
  query_columns< ::polaris::io::Household, A >::
  workers (A::table_name, "\"workers\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::vehicles_type_
  query_columns< ::polaris::io::Household, A >::
  vehicles (A::table_name, "\"vehicles\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::type_type_
  query_columns< ::polaris::io::Household, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::partition_type_
  query_columns< ::polaris::io::Household, A >::
  partition (A::table_name, "\"partition\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::person_type_
  query_columns< ::polaris::io::Household, A >::
  person (A::table_name, "\"person\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::age_type_
  query_columns< ::polaris::io::Household, A >::
  age (A::table_name, "\"age\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::relate_type_
  query_columns< ::polaris::io::Household, A >::
  relate (A::table_name, "\"relate\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::gender_type_
  query_columns< ::polaris::io::Household, A >::
  gender (A::table_name, "\"gender\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::work_type_
  query_columns< ::polaris::io::Household, A >::
  work (A::table_name, "\"work\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Household, A >::drive_type_
  query_columns< ::polaris::io::Household, A >::
  drive (A::table_name, "\"drive\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Household, A >:
    query_columns< ::polaris::io::Household, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Household >
  {
    public:
    typedef ::polaris::io::Household object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Household > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // hhold
      //
      long long hhold_value;
      bool hhold_null;

      // location
      //
      long long location_value;
      bool location_null;

      // persons
      //
      long long persons_value;
      bool persons_null;

      // workers
      //
      long long workers_value;
      bool workers_null;

      // vehicles
      //
      long long vehicles_value;
      bool vehicles_null;

      // type
      //
      long long type_value;
      bool type_null;

      // partition
      //
      long long partition_value;
      bool partition_null;

      // person
      //
      long long person_value;
      bool person_null;

      // age
      //
      long long age_value;
      bool age_null;

      // relate
      //
      long long relate_value;
      bool relate_null;

      // gender
      //
      long long gender_value;
      bool gender_null;

      // work
      //
      long long work_value;
      bool work_null;

      // drive
      //
      long long drive_value;
      bool drive_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 14UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Vehicle
  //
  template <>
  struct class_traits< ::polaris::io::Vehicle >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Vehicle, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // hhold
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hhold_type_;

    static const hhold_type_ hhold;

    // vehicle
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    vehicle_type_;

    static const vehicle_type_ vehicle;

    // parking
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    parking_type_;

    static const parking_type_ parking;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;

    // subtype
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    subtype_type_;

    static const subtype_type_ subtype;

    // partition
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    partition_type_;

    static const partition_type_ partition;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Vehicle, A >::auto_id_type_
  query_columns< ::polaris::io::Vehicle, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Vehicle, A >::hhold_type_
  query_columns< ::polaris::io::Vehicle, A >::
  hhold (A::table_name, "\"hhold\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Vehicle, A >::vehicle_type_
  query_columns< ::polaris::io::Vehicle, A >::
  vehicle (A::table_name, "\"vehicle\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Vehicle, A >::parking_type_
  query_columns< ::polaris::io::Vehicle, A >::
  parking (A::table_name, "\"parking\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Vehicle, A >::type_type_
  query_columns< ::polaris::io::Vehicle, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Vehicle, A >::subtype_type_
  query_columns< ::polaris::io::Vehicle, A >::
  subtype (A::table_name, "\"subtype\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Vehicle, A >::partition_type_
  query_columns< ::polaris::io::Vehicle, A >::
  partition (A::table_name, "\"partition\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Vehicle, A >:
    query_columns< ::polaris::io::Vehicle, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Vehicle >
  {
    public:
    typedef ::polaris::io::Vehicle object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Vehicle > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // hhold
      //
      long long hhold_value;
      bool hhold_null;

      // vehicle
      //
      long long vehicle_value;
      bool vehicle_null;

      // parking
      //
      long long parking_value;
      bool parking_null;

      // type
      //
      long long type_value;
      bool type_null;

      // subtype
      //
      long long subtype_value;
      bool subtype_null;

      // partition
      //
      long long partition_value;
      bool partition_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Trip
  //
  template <>
  struct class_traits< ::polaris::io::Trip >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Trip, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // hhold
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hhold_type_;

    static const hhold_type_ hhold;

    // person
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    person_type_;

    static const person_type_ person;

    // tour
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    tour_type_;

    static const tour_type_ tour;

    // trip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    trip_type_;

    static const trip_type_ trip;

    // start
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    start_type_;

    static const start_type_ start;

    // end
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    end_type_;

    static const end_type_ end;

    // duration
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    duration_type_;

    static const duration_type_ duration;

    // origin
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    origin_type_;

    static const origin_type_ origin;

    // destination
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    destination_type_;

    static const destination_type_ destination;

    // purpose
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    purpose_type_;

    static const purpose_type_ purpose;

    // mode
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    mode_type_;

    static const mode_type_ mode;

    // constraint
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    constraint_type_;

    static const constraint_type_ constraint;

    // priority
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    priority_type_;

    static const priority_type_ priority;

    // vehicle
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    vehicle_type_;

    static const vehicle_type_ vehicle;

    // passengers
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    passengers_type_;

    static const passengers_type_ passengers;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;

    // partition
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    partition_type_;

    static const partition_type_ partition;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::auto_id_type_
  query_columns< ::polaris::io::Trip, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::hhold_type_
  query_columns< ::polaris::io::Trip, A >::
  hhold (A::table_name, "\"hhold\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::person_type_
  query_columns< ::polaris::io::Trip, A >::
  person (A::table_name, "\"person\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::tour_type_
  query_columns< ::polaris::io::Trip, A >::
  tour (A::table_name, "\"tour\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::trip_type_
  query_columns< ::polaris::io::Trip, A >::
  trip (A::table_name, "\"trip\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::start_type_
  query_columns< ::polaris::io::Trip, A >::
  start (A::table_name, "\"start\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::end_type_
  query_columns< ::polaris::io::Trip, A >::
  end (A::table_name, "\"end\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::duration_type_
  query_columns< ::polaris::io::Trip, A >::
  duration (A::table_name, "\"duration\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::origin_type_
  query_columns< ::polaris::io::Trip, A >::
  origin (A::table_name, "\"origin\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::destination_type_
  query_columns< ::polaris::io::Trip, A >::
  destination (A::table_name, "\"destination\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::purpose_type_
  query_columns< ::polaris::io::Trip, A >::
  purpose (A::table_name, "\"purpose\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::mode_type_
  query_columns< ::polaris::io::Trip, A >::
  mode (A::table_name, "\"mode\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::constraint_type_
  query_columns< ::polaris::io::Trip, A >::
  constraint (A::table_name, "\"constraint\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::priority_type_
  query_columns< ::polaris::io::Trip, A >::
  priority (A::table_name, "\"priority\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::vehicle_type_
  query_columns< ::polaris::io::Trip, A >::
  vehicle (A::table_name, "\"vehicle\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::passengers_type_
  query_columns< ::polaris::io::Trip, A >::
  passengers (A::table_name, "\"passengers\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::type_type_
  query_columns< ::polaris::io::Trip, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Trip, A >::partition_type_
  query_columns< ::polaris::io::Trip, A >::
  partition (A::table_name, "\"partition\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Trip, A >:
    query_columns< ::polaris::io::Trip, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Trip >
  {
    public:
    typedef ::polaris::io::Trip object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Trip > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // hhold
      //
      long long hhold_value;
      bool hhold_null;

      // person
      //
      long long person_value;
      bool person_null;

      // tour
      //
      long long tour_value;
      bool tour_null;

      // trip
      //
      long long trip_value;
      bool trip_null;

      // start
      //
      double start_value;
      bool start_null;

      // end
      //
      double end_value;
      bool end_null;

      // duration
      //
      double duration_value;
      bool duration_null;

      // origin
      //
      long long origin_value;
      bool origin_null;

      // destination
      //
      long long destination_value;
      bool destination_null;

      // purpose
      //
      long long purpose_value;
      bool purpose_null;

      // mode
      //
      long long mode_value;
      bool mode_null;

      // constraint
      //
      long long constraint_value;
      bool constraint_null;

      // priority
      //
      long long priority_value;
      bool priority_null;

      // vehicle
      //
      long long vehicle_value;
      bool vehicle_null;

      // passengers
      //
      long long passengers_value;
      bool passengers_null;

      // type
      //
      long long type_value;
      bool type_null;

      // partition
      //
      long long partition_value;
      bool partition_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 18UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Plan
  //
  template <>
  struct class_traits< ::polaris::io::Plan >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Plan, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // depart
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    depart_type_;

    static const depart_type_ depart;

    // arrive
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    arrive_type_;

    static const arrive_type_ arrive;

    // activity
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    activity_type_;

    static const activity_type_ activity;

    // walk
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    walk_type_;

    static const walk_type_ walk;

    // drive
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    drive_type_;

    static const drive_type_ drive;

    // transit
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    transit_type_;

    static const transit_type_ transit;

    // wait
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    wait_type_;

    static const wait_type_ wait;

    // other
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    other_type_;

    static const other_type_ other;

    // length
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    length_type_;

    static const length_type_ length;

    // cost
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    cost_type_;

    static const cost_type_ cost;

    // impedance
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    impedance_type_;

    static const impedance_type_ impedance;

    // leg_mode
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    leg_mode_type_;

    static const leg_mode_type_ leg_mode;

    // leg_type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    leg_type_type_;

    static const leg_type_type_ leg_type;

    // leg_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    leg_id_type_;

    static const leg_id_type_ leg_id;

    // leg_time
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    leg_time_type_;

    static const leg_time_type_ leg_time;

    // leg_length
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    leg_length_type_;

    static const leg_length_type_ leg_length;

    // leg_cost
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    leg_cost_type_;

    static const leg_cost_type_ leg_cost;

    // leg_imp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    leg_imp_type_;

    static const leg_imp_type_ leg_imp;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::auto_id_type_
  query_columns< ::polaris::io::Plan, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::depart_type_
  query_columns< ::polaris::io::Plan, A >::
  depart (A::table_name, "\"depart\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::arrive_type_
  query_columns< ::polaris::io::Plan, A >::
  arrive (A::table_name, "\"arrive\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::activity_type_
  query_columns< ::polaris::io::Plan, A >::
  activity (A::table_name, "\"activity\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::walk_type_
  query_columns< ::polaris::io::Plan, A >::
  walk (A::table_name, "\"walk\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::drive_type_
  query_columns< ::polaris::io::Plan, A >::
  drive (A::table_name, "\"drive\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::transit_type_
  query_columns< ::polaris::io::Plan, A >::
  transit (A::table_name, "\"transit\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::wait_type_
  query_columns< ::polaris::io::Plan, A >::
  wait (A::table_name, "\"wait\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::other_type_
  query_columns< ::polaris::io::Plan, A >::
  other (A::table_name, "\"other\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::length_type_
  query_columns< ::polaris::io::Plan, A >::
  length (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::cost_type_
  query_columns< ::polaris::io::Plan, A >::
  cost (A::table_name, "\"cost\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::impedance_type_
  query_columns< ::polaris::io::Plan, A >::
  impedance (A::table_name, "\"impedance\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::leg_mode_type_
  query_columns< ::polaris::io::Plan, A >::
  leg_mode (A::table_name, "\"leg_mode\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::leg_type_type_
  query_columns< ::polaris::io::Plan, A >::
  leg_type (A::table_name, "\"leg_type\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::leg_id_type_
  query_columns< ::polaris::io::Plan, A >::
  leg_id (A::table_name, "\"leg_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::leg_time_type_
  query_columns< ::polaris::io::Plan, A >::
  leg_time (A::table_name, "\"leg_time\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::leg_length_type_
  query_columns< ::polaris::io::Plan, A >::
  leg_length (A::table_name, "\"leg_length\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::leg_cost_type_
  query_columns< ::polaris::io::Plan, A >::
  leg_cost (A::table_name, "\"leg_cost\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Plan, A >::leg_imp_type_
  query_columns< ::polaris::io::Plan, A >::
  leg_imp (A::table_name, "\"leg_imp\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Plan, A >:
    query_columns< ::polaris::io::Plan, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Plan >
  {
    public:
    typedef ::polaris::io::Plan object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Plan > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // depart
      //
      double depart_value;
      bool depart_null;

      // arrive
      //
      double arrive_value;
      bool arrive_null;

      // activity
      //
      double activity_value;
      bool activity_null;

      // walk
      //
      double walk_value;
      bool walk_null;

      // drive
      //
      double drive_value;
      bool drive_null;

      // transit
      //
      double transit_value;
      bool transit_null;

      // wait
      //
      double wait_value;
      bool wait_null;

      // other
      //
      double other_value;
      bool other_null;

      // length
      //
      double length_value;
      bool length_null;

      // cost
      //
      double cost_value;
      bool cost_null;

      // impedance
      //
      long long impedance_value;
      bool impedance_null;

      // leg_mode
      //
      long long leg_mode_value;
      bool leg_mode_null;

      // leg_type
      //
      long long leg_type_value;
      bool leg_type_null;

      // leg_id
      //
      long long leg_id_value;
      bool leg_id_null;

      // leg_time
      //
      double leg_time_value;
      bool leg_time_null;

      // leg_length
      //
      double leg_length_value;
      bool leg_length_null;

      // leg_cost
      //
      double leg_cost_value;
      bool leg_cost_null;

      // leg_imp
      //
      long long leg_imp_value;
      bool leg_imp_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 19UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Traveler
  //
  template <>
  struct class_traits< ::polaris::io::Traveler >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Traveler, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // hhold
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hhold_type_;

    static const hhold_type_ hhold;

    // person
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    person_type_;

    static const person_type_ person;

    // tour
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    tour_type_;

    static const tour_type_ tour;

    // trip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    trip_type_;

    static const trip_type_ trip;

    // mode
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    mode_type_;

    static const mode_type_ mode;

    // time
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    time_type_;

    static const time_type_ time;

    // distance
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    distance_type_;

    static const distance_type_ distance;

    // speed
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    speed_type_;

    static const speed_type_ speed;

    // link
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    link_type_;

    static const link_type_ link;

    // dir
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    dir_type_;

    static const dir_type_ dir;

    // lane
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    lane_type_;

    static const lane_type_ lane;

    // offset
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    offset_type_;

    static const offset_type_ offset;

    // route
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    route_type_;

    static const route_type_ route;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::auto_id_type_
  query_columns< ::polaris::io::Traveler, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::hhold_type_
  query_columns< ::polaris::io::Traveler, A >::
  hhold (A::table_name, "\"hhold\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::person_type_
  query_columns< ::polaris::io::Traveler, A >::
  person (A::table_name, "\"person\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::tour_type_
  query_columns< ::polaris::io::Traveler, A >::
  tour (A::table_name, "\"tour\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::trip_type_
  query_columns< ::polaris::io::Traveler, A >::
  trip (A::table_name, "\"trip\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::mode_type_
  query_columns< ::polaris::io::Traveler, A >::
  mode (A::table_name, "\"mode\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::time_type_
  query_columns< ::polaris::io::Traveler, A >::
  time (A::table_name, "\"time\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::distance_type_
  query_columns< ::polaris::io::Traveler, A >::
  distance (A::table_name, "\"distance\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::speed_type_
  query_columns< ::polaris::io::Traveler, A >::
  speed (A::table_name, "\"speed\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::link_type_
  query_columns< ::polaris::io::Traveler, A >::
  link (A::table_name, "\"link\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::dir_type_
  query_columns< ::polaris::io::Traveler, A >::
  dir (A::table_name, "\"dir\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::lane_type_
  query_columns< ::polaris::io::Traveler, A >::
  lane (A::table_name, "\"lane\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::offset_type_
  query_columns< ::polaris::io::Traveler, A >::
  offset (A::table_name, "\"offset\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Traveler, A >::route_type_
  query_columns< ::polaris::io::Traveler, A >::
  route (A::table_name, "\"route\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Traveler, A >:
    query_columns< ::polaris::io::Traveler, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Traveler >
  {
    public:
    typedef ::polaris::io::Traveler object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Traveler > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // hhold
      //
      long long hhold_value;
      bool hhold_null;

      // person
      //
      long long person_value;
      bool person_null;

      // tour
      //
      long long tour_value;
      bool tour_null;

      // trip
      //
      long long trip_value;
      bool trip_null;

      // mode
      //
      long long mode_value;
      bool mode_null;

      // time
      //
      double time_value;
      bool time_null;

      // distance
      //
      double distance_value;
      bool distance_null;

      // speed
      //
      double speed_value;
      bool speed_null;

      // link
      //
      long long link_value;
      bool link_null;

      // dir
      //
      long long dir_value;
      bool dir_null;

      // lane
      //
      long long lane_value;
      bool lane_null;

      // offset
      //
      double offset_value;
      bool offset_null;

      // route
      //
      long long route_value;
      bool route_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 14UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };
}

#include "Demand-odb.ixx"

#include <odb/post.hxx>

#endif // DEMAND_ODB_HXX
