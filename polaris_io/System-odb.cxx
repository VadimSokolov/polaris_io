// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "System-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>

namespace odb
{
  // table_field
  //

  bool access::composite_value_traits< ::polaris::io::table_field, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // table
    //
    if (t[0UL])
    {
      i.table_value.capacity (i.table_size);
      grew = true;
    }

    // field
    //
    if (t[1UL])
    {
      i.field_value.capacity (i.field_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::polaris::io::table_field, id_sqlite >::
  bind (sqlite::bind* b, image_type& i, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // table
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.table_value.data ();
    b[n].size = &i.table_size;
    b[n].capacity = i.table_value.capacity ();
    b[n].is_null = &i.table_null;
    n++;

    // field
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.field_value.data ();
    b[n].size = &i.field_size;
    b[n].capacity = i.field_value.capacity ();
    b[n].is_null = &i.field_null;
    n++;
  }

  bool access::composite_value_traits< ::polaris::io::table_field, id_sqlite >::
  init (image_type& i, const value_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // table
    //
    {
      ::std::string const& v =
        o.table;

      bool is_null (false);
      std::size_t cap (i.table_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.table_value,
        i.table_size,
        is_null,
        v);
      i.table_null = is_null;
      grew = grew || (cap != i.table_value.capacity ());
    }

    // field
    //
    {
      ::std::string const& v =
        o.field;

      bool is_null (false);
      std::size_t cap (i.field_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.field_value,
        i.field_size,
        is_null,
        v);
      i.field_null = is_null;
      grew = grew || (cap != i.field_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::polaris::io::table_field, id_sqlite >::
  init (value_type& o, const image_type&  i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // table
    //
    {
      ::std::string& v =
        o.table;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.table_value,
        i.table_size,
        i.table_null);
    }

    // field
    //
    {
      ::std::string& v =
        o.field;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.field_value,
        i.field_size,
        i.field_null);
    }
  }

  // Quantity
  //

  const char alias_traits<  ::polaris::io::Dimension,
    id_sqlite,
    access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::quantity_tag>::
  table_name[] = "\"quantity\"";

  access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      composite_value_traits< ::polaris::io::table_field, id_sqlite >::init (
        id,
        i.tf_value,
        db);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // tf
    //
    if (composite_value_traits< ::polaris::io::table_field, id_sqlite >::grow (
          i.tf_value, t + 0UL))
    {
      grew = true;
    }

    // quantity
    //
    if (t[2UL])
    {
      i.quantity_value.capacity (i.quantity_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // tf
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::polaris::io::table_field, id_sqlite >::bind (
        b + n, i.tf_value, sk);
      n += 2UL;
    }

    // quantity
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.quantity_value.data ();
    b[n].size = &i.quantity_size;
    b[n].capacity = i.quantity_value.capacity ();
    b[n].is_null = &i.quantity_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    sqlite::statement_kind sk (sqlite::statement_select);
    composite_value_traits< ::polaris::io::table_field, id_sqlite >::bind (
      b + n, i.id_value, sk);
  }

  bool access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // tf
    //
    if (sk == statement_insert)
    {
      ::polaris::io::table_field const& v =
        o.tf;

      if (composite_value_traits< ::polaris::io::table_field, id_sqlite >::init (
            i.tf_value,
            v,
            sk))
        grew = true;
    }

    // quantity
    //
    {
      ::std::tr1::shared_ptr< ::polaris::io::Dimension > const& v =
        o.quantity;

      typedef object_traits< ::polaris::io::Dimension > obj_traits;
      typedef odb::pointer_traits< ::std::tr1::shared_ptr< ::polaris::io::Dimension > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        std::size_t cap (i.quantity_value.capacity ());
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_text >::set_image (
          i.quantity_value,
          i.quantity_size,
          is_null,
          id);
        i.quantity_null = is_null;
        grew = grew || (cap != i.quantity_value.capacity ());
      }
      else
        i.quantity_null = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // tf
    //
    {
      ::polaris::io::table_field& v =
        o.tf;

      composite_value_traits< ::polaris::io::table_field, id_sqlite >::init (
        v,
        i.tf_value,
        db);
    }

    // quantity
    //
    {
      ::std::tr1::shared_ptr< ::polaris::io::Dimension >& v =
        o.quantity;

      typedef object_traits< ::polaris::io::Dimension > obj_traits;
      typedef odb::pointer_traits< ::std::tr1::shared_ptr< ::polaris::io::Dimension > > ptr_traits;

      if (i.quantity_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_text >::set_value (
          id,
          i.quantity_value,
          i.quantity_size,
          i.quantity_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    sqlite::statement_kind sk (sqlite::statement_select);
    {
      if (composite_value_traits< ::polaris::io::table_field, id_sqlite >::init (
            i.id_value,
            id,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  struct access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Quantity\" ("
  "\"tf_table\","
  "\"tf_field\","
  "\"quantity\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Quantity\".\"tf_table\","
  "\"Quantity\".\"tf_field\","
  "\"Quantity\".\"quantity\""
  " FROM \"Quantity\""
  " WHERE \"Quantity\".\"tf_table\"=?"
  " AND \"Quantity\".\"tf_field\"=?";

  const char access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::update_statement[] =
  "UPDATE \"Quantity\" SET "
  "\"quantity\"=?"
  " WHERE \"tf_table\"=?"
  " AND \"tf_field\"=?";

  const char access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Quantity\""
  " WHERE \"tf_table\"=?"
  " AND \"tf_field\"=?";

  const char access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Quantity\".\"tf_table\","
  "\"Quantity\".\"tf_field\","
  "\"Quantity\".\"quantity\""
  " FROM \"Quantity\""
  " LEFT JOIN \"Dimension\" AS \"quantity\" ON \"quantity\".\"quantity\"=\"Quantity\".\"quantity\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Quantity\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::table_name[] =
  "\"Quantity\"";

  void access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.tf);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.tf);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Quantity\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Quantity\" (\n"
                      "  \"tf_table\" TEXT NOT NULL,\n"
                      "  \"tf_field\" TEXT NOT NULL,\n"
                      "  \"quantity\" TEXT,\n"
                      "  PRIMARY KEY (\n"
                      "    \"tf_table\",\n"
                      "    \"tf_field\"),\n"
                      "  CONSTRAINT \"quantity_fk\"\n"
                      "    FOREIGN KEY (\"quantity\")\n"
                      "    REFERENCES \"Dimension\" (\"quantity\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Quantity_ (
    id_sqlite,
    "System",
    &access::object_traits_impl< ::polaris::io::Quantity, id_sqlite >::create_schema);

  // Dimension
  //

  access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        id,
        i.quantity_value,
        i.quantity_size,
        i.quantity_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // quantity
    //
    if (t[0UL])
    {
      i.quantity_value.capacity (i.quantity_size);
      grew = true;
    }

    // mass
    //
    t[1UL] = false;

    // length
    //
    t[2UL] = false;

    // time
    //
    t[3UL] = false;

    // lane
    //
    t[4UL] = false;

    // usd
    //
    t[5UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // quantity
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.quantity_value.data ();
      b[n].size = &i.quantity_size;
      b[n].capacity = i.quantity_value.capacity ();
      b[n].is_null = &i.quantity_null;
      n++;
    }

    // mass
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.mass_value;
    b[n].is_null = &i.mass_null;
    n++;

    // length
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.length_value;
    b[n].is_null = &i.length_null;
    n++;

    // time
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // lane
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.lane_value;
    b[n].is_null = &i.lane_null;
    n++;

    // usd
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.usd_value;
    b[n].is_null = &i.usd_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.id_value.data ();
    b[n].size = &i.id_size;
    b[n].capacity = i.id_value.capacity ();
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // quantity
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.quantity;

      bool is_null (false);
      std::size_t cap (i.quantity_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.quantity_value,
        i.quantity_size,
        is_null,
        v);
      i.quantity_null = is_null;
      grew = grew || (cap != i.quantity_value.capacity ());
    }

    // mass
    //
    {
      int const& v =
        o.mass;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.mass_value,
        is_null,
        v);
      i.mass_null = is_null;
    }

    // length
    //
    {
      int const& v =
        o.length;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.length_value,
        is_null,
        v);
      i.length_null = is_null;
    }

    // time
    //
    {
      int const& v =
        o.time;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.time_value,
        is_null,
        v);
      i.time_null = is_null;
    }

    // lane
    //
    {
      int const& v =
        o.lane;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.lane_value,
        is_null,
        v);
      i.lane_null = is_null;
    }

    // usd
    //
    {
      int const& v =
        o.usd;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.usd_value,
        is_null,
        v);
      i.usd_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // quantity
    //
    {
      ::std::string& v =
        o.quantity;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.quantity_value,
        i.quantity_size,
        i.quantity_null);
    }

    // mass
    //
    {
      int& v =
        o.mass;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.mass_value,
        i.mass_null);
    }

    // length
    //
    {
      int& v =
        o.length;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.length_value,
        i.length_null);
    }

    // time
    //
    {
      int& v =
        o.time;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // lane
    //
    {
      int& v =
        o.lane;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.lane_value,
        i.lane_null);
    }

    // usd
    //
    {
      int& v =
        o.usd;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.usd_value,
        i.usd_null);
    }
  }

  void access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t cap (i.id_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.id_value,
        i.id_size,
        is_null,
        id);
      i.id_null = is_null;
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  struct access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Dimension\" ("
  "\"quantity\","
  "\"mass\","
  "\"length\","
  "\"time\","
  "\"lane\","
  "\"usd\")"
  " VALUES (?,?,?,?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Dimension\".\"quantity\","
  "\"Dimension\".\"mass\","
  "\"Dimension\".\"length\","
  "\"Dimension\".\"time\","
  "\"Dimension\".\"lane\","
  "\"Dimension\".\"usd\""
  " FROM \"Dimension\""
  " WHERE \"Dimension\".\"quantity\"=?";

  const char access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::update_statement[] =
  "UPDATE \"Dimension\" SET "
  "\"mass\"=?,"
  "\"length\"=?,"
  "\"time\"=?,"
  "\"lane\"=?,"
  "\"usd\"=?"
  " WHERE \"quantity\"=?";

  const char access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Dimension\""
  " WHERE \"quantity\"=?";

  const char access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Dimension\".\"quantity\","
  "\"Dimension\".\"mass\","
  "\"Dimension\".\"length\","
  "\"Dimension\".\"time\","
  "\"Dimension\".\"lane\","
  "\"Dimension\".\"usd\""
  " FROM \"Dimension\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Dimension\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::table_name[] =
  "\"Dimension\"";

  void access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.quantity);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.quantity);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Dimension\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Dimension\" (\n"
                      "  \"quantity\" TEXT NOT NULL PRIMARY KEY,\n"
                      "  \"mass\" INTEGER NOT NULL,\n"
                      "  \"length\" INTEGER NOT NULL,\n"
                      "  \"time\" INTEGER NOT NULL,\n"
                      "  \"lane\" INTEGER NOT NULL,\n"
                      "  \"usd\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Dimension_ (
    id_sqlite,
    "System",
    &access::object_traits_impl< ::polaris::io::Dimension, id_sqlite >::create_schema);

  // Meta
  //

  access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = false;

    // key
    //
    if (t[1UL])
    {
      i.key_value.capacity (i.key_size);
      grew = true;
    }

    // value
    //
    if (t[2UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // key
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.key_value.data ();
    b[n].size = &i.key_size;
    b[n].capacity = i.key_value.capacity ();
    b[n].is_null = &i.key_null;
    n++;

    // value
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.value_value.data ();
    b[n].size = &i.value_size;
    b[n].capacity = i.value_value.capacity ();
    b[n].is_null = &i.value_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id
    //
    if (sk == statement_insert)
    {
      int const& v =
        o.id;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // key
    //
    {
      ::std::string const& v =
        o.key;

      bool is_null (false);
      std::size_t cap (i.key_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.key_value,
        i.key_size,
        is_null,
        v);
      i.key_null = is_null;
      grew = grew || (cap != i.key_value.capacity ());
    }

    // value
    //
    {
      ::std::string const& v =
        o.value;

      bool is_null (false);
      std::size_t cap (i.value_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.value_value,
        i.value_size,
        is_null,
        v);
      i.value_null = is_null;
      grew = grew || (cap != i.value_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      int& v =
        o.id;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // key
    //
    {
      ::std::string& v =
        o.key;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.key_value,
        i.key_size,
        i.key_null);
    }

    // value
    //
    {
      ::std::string& v =
        o.value;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }
  }

  void access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Meta\" ("
  "\"id\","
  "\"key\","
  "\"value\")"
  " VALUES (?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Meta\".\"id\","
  "\"Meta\".\"key\","
  "\"Meta\".\"value\""
  " FROM \"Meta\""
  " WHERE \"Meta\".\"id\"=?";

  const char access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::update_statement[] =
  "UPDATE \"Meta\" SET "
  "\"key\"=?,"
  "\"value\"=?"
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Meta\""
  " WHERE \"id\"=?";

  const char access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Meta\".\"id\","
  "\"Meta\".\"key\","
  "\"Meta\".\"value\""
  " FROM \"Meta\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Meta\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::table_name[] =
  "\"Meta\"";

  void access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Meta\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Meta\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"key\" TEXT NOT NULL,\n"
                      "  \"value\" TEXT NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Meta_ (
    id_sqlite,
    "System",
    &access::object_traits_impl< ::polaris::io::Meta, id_sqlite >::create_schema);
}

#include <odb/post.hxx>
