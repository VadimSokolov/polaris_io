// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef RESULT_ODB_HXX
#define RESULT_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20100UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Result.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/tr1/wrapper-traits.hxx>
#include <odb/tr1/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/buffer.hxx>
#include <odb/details/unused.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // Link_Delay
  //
  template <>
  struct class_traits< ::polaris::io::Link_Delay >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Link_Delay, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // link
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    link_type_;

    static const link_type_ link;

    // dir
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    dir_type_;

    static const dir_type_ dir;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;

    // start
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    start_type_;

    static const start_type_ start;

    // end
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    end_type_;

    static const end_type_ end;

    // flow
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    flow_type_;

    static const flow_type_ flow;

    // time
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    time_type_;

    static const time_type_ time;

    // out_link
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    out_link_type_;

    static const out_link_type_ out_link;

    // out_flow
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    out_flow_type_;

    static const out_flow_type_ out_flow;

    // out_time
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    out_time_type_;

    static const out_time_type_ out_time;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::auto_id_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::link_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  link (A::table_name, "\"link\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::dir_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  dir (A::table_name, "\"dir\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::type_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::start_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  start (A::table_name, "\"start\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::end_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  end (A::table_name, "\"end\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::flow_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  flow (A::table_name, "\"flow\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::time_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  time (A::table_name, "\"time\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::out_link_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  out_link (A::table_name, "\"out_link\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::out_flow_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  out_flow (A::table_name, "\"out_flow\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Link_Delay, A >::out_time_type_
  query_columns< ::polaris::io::Link_Delay, A >::
  out_time (A::table_name, "\"out_time\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Link_Delay, A >:
    query_columns< ::polaris::io::Link_Delay, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Link_Delay >
  {
    public:
    typedef ::polaris::io::Link_Delay object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Link_Delay > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // link
      //
      long long link_value;
      bool link_null;

      // dir
      //
      long long dir_value;
      bool dir_null;

      // type
      //
      long long type_value;
      bool type_null;

      // start
      //
      double start_value;
      bool start_null;

      // end
      //
      double end_value;
      bool end_null;

      // flow
      //
      double flow_value;
      bool flow_null;

      // time
      //
      double time_value;
      bool time_null;

      // out_link
      //
      long long out_link_value;
      bool out_link_null;

      // out_flow
      //
      double out_flow_value;
      bool out_flow_null;

      // out_time
      //
      double out_time_value;
      bool out_time_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 11UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Performance
  //
  template <>
  struct class_traits< ::polaris::io::Performance >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Performance, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // speed
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    speed_type_;

    static const speed_type_ speed;

    // delay
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    delay_type_;

    static const delay_type_ delay;

    // density
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    density_type_;

    static const density_type_ density;

    // max_den
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    max_den_type_;

    static const max_den_type_ max_den;

    // ratio
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    ratio_type_;

    static const ratio_type_ ratio;

    // queue
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    queue_type_;

    static const queue_type_ queue;

    // max_que
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    max_que_type_;

    static const max_que_type_ max_que;

    // fail
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    fail_type_;

    static const fail_type_ fail;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::auto_id_type_
  query_columns< ::polaris::io::Performance, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::speed_type_
  query_columns< ::polaris::io::Performance, A >::
  speed (A::table_name, "\"speed\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::delay_type_
  query_columns< ::polaris::io::Performance, A >::
  delay (A::table_name, "\"delay\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::density_type_
  query_columns< ::polaris::io::Performance, A >::
  density (A::table_name, "\"density\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::max_den_type_
  query_columns< ::polaris::io::Performance, A >::
  max_den (A::table_name, "\"max_den\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::ratio_type_
  query_columns< ::polaris::io::Performance, A >::
  ratio (A::table_name, "\"ratio\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::queue_type_
  query_columns< ::polaris::io::Performance, A >::
  queue (A::table_name, "\"queue\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::max_que_type_
  query_columns< ::polaris::io::Performance, A >::
  max_que (A::table_name, "\"max_que\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Performance, A >::fail_type_
  query_columns< ::polaris::io::Performance, A >::
  fail (A::table_name, "\"fail\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Performance, A >:
    query_columns< ::polaris::io::Performance, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Performance >
  {
    public:
    typedef ::polaris::io::Performance object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Performance > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // speed
      //
      double speed_value;
      bool speed_null;

      // delay
      //
      double delay_value;
      bool delay_null;

      // density
      //
      double density_value;
      bool density_null;

      // max_den
      //
      double max_den_value;
      bool max_den_null;

      // ratio
      //
      double ratio_value;
      bool ratio_null;

      // queue
      //
      double queue_value;
      bool queue_null;

      // max_que
      //
      long long max_que_value;
      bool max_que_null;

      // fail
      //
      long long fail_value;
      bool fail_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Problem
  //
  template <>
  struct class_traits< ::polaris::io::Problem >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Problem, A >
  {
    // problem
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    problem_type_;

    static const problem_type_ problem;

    // time
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    time_type_;

    static const time_type_ time;

    // link
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    link_type_;

    static const link_type_ link;

    // dir
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    dir_type_;

    static const dir_type_ dir;

    // lane
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    lane_type_;

    static const lane_type_ lane;

    // offset
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    offset_type_;

    static const offset_type_ offset;

    // route
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    route_type_;

    static const route_type_ route;

    // survey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    survey_type_;

    static const survey_type_ survey;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Problem, A >::problem_type_
  query_columns< ::polaris::io::Problem, A >::
  problem (A::table_name, "\"problem\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Problem, A >::time_type_
  query_columns< ::polaris::io::Problem, A >::
  time (A::table_name, "\"time\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Problem, A >::link_type_
  query_columns< ::polaris::io::Problem, A >::
  link (A::table_name, "\"link\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Problem, A >::dir_type_
  query_columns< ::polaris::io::Problem, A >::
  dir (A::table_name, "\"dir\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Problem, A >::lane_type_
  query_columns< ::polaris::io::Problem, A >::
  lane (A::table_name, "\"lane\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Problem, A >::offset_type_
  query_columns< ::polaris::io::Problem, A >::
  offset (A::table_name, "\"offset\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Problem, A >::route_type_
  query_columns< ::polaris::io::Problem, A >::
  route (A::table_name, "\"route\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Problem, A >::survey_type_
  query_columns< ::polaris::io::Problem, A >::
  survey (A::table_name, "\"survey\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Problem, A >:
    query_columns< ::polaris::io::Problem, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Problem >
  {
    public:
    typedef ::polaris::io::Problem object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Problem > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef int id_type;
    static const bool auto_id = false;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // problem
      //
      long long problem_value;
      bool problem_null;

      // time
      //
      double time_value;
      bool time_null;

      // link
      //
      long long link_value;
      bool link_null;

      // dir
      //
      long long dir_value;
      bool dir_null;

      // lane
      //
      long long lane_value;
      bool lane_null;

      // offset
      //
      double offset_value;
      bool offset_null;

      // route
      //
      long long route_value;
      bool route_null;

      // survey
      //
      long long survey_value;
      bool survey_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Skim
  //
  template <>
  struct class_traits< ::polaris::io::Skim >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Skim, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // time
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    time_type_;

    static const time_type_ time;

    // walk
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    walk_type_;

    static const walk_type_ walk;

    // drive
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    drive_type_;

    static const drive_type_ drive;

    // transit
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    transit_type_;

    static const transit_type_ transit;

    // wait
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    wait_type_;

    static const wait_type_ wait;

    // other
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    other_type_;

    static const other_type_ other;

    // length
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    length_type_;

    static const length_type_ length;

    // cost
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    cost_type_;

    static const cost_type_ cost;

    // impedance
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    impedance_type_;

    static const impedance_type_ impedance;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::auto_id_type_
  query_columns< ::polaris::io::Skim, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::time_type_
  query_columns< ::polaris::io::Skim, A >::
  time (A::table_name, "\"time\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::walk_type_
  query_columns< ::polaris::io::Skim, A >::
  walk (A::table_name, "\"walk\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::drive_type_
  query_columns< ::polaris::io::Skim, A >::
  drive (A::table_name, "\"drive\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::transit_type_
  query_columns< ::polaris::io::Skim, A >::
  transit (A::table_name, "\"transit\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::wait_type_
  query_columns< ::polaris::io::Skim, A >::
  wait (A::table_name, "\"wait\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::other_type_
  query_columns< ::polaris::io::Skim, A >::
  other (A::table_name, "\"other\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::length_type_
  query_columns< ::polaris::io::Skim, A >::
  length (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::cost_type_
  query_columns< ::polaris::io::Skim, A >::
  cost (A::table_name, "\"cost\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Skim, A >::impedance_type_
  query_columns< ::polaris::io::Skim, A >::
  impedance (A::table_name, "\"impedance\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Skim, A >:
    query_columns< ::polaris::io::Skim, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Skim >
  {
    public:
    typedef ::polaris::io::Skim object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Skim > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // time
      //
      double time_value;
      bool time_null;

      // walk
      //
      double walk_value;
      bool walk_null;

      // drive
      //
      double drive_value;
      bool drive_null;

      // transit
      //
      double transit_value;
      bool transit_null;

      // wait
      //
      double wait_value;
      bool wait_null;

      // other
      //
      double other_value;
      bool other_null;

      // length
      //
      double length_value;
      bool length_null;

      // cost
      //
      double cost_value;
      bool cost_null;

      // impedance
      //
      long long impedance_value;
      bool impedance_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 10UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Event
  //
  template <>
  struct class_traits< ::polaris::io::Event >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Event, A >
  {
    // auto_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    auto_id_type_;

    static const auto_id_type_ auto_id;

    // hhold
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hhold_type_;

    static const hhold_type_ hhold;

    // person
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    person_type_;

    static const person_type_ person;

    // tour
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    tour_type_;

    static const tour_type_ tour;

    // trip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    trip_type_;

    static const trip_type_ trip;

    // mode
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    mode_type_;

    static const mode_type_ mode;

    // type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    type_type_;

    static const type_type_ type;

    // schedule
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    schedule_type_;

    static const schedule_type_ schedule;

    // actual
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    actual_type_;

    static const actual_type_ actual;

    // link
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    link_type_;

    static const link_type_ link;

    // dir
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    dir_type_;

    static const dir_type_ dir;

    // lane
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    lane_type_;

    static const lane_type_ lane;

    // offset
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    offset_type_;

    static const offset_type_ offset;

    // route
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    route_type_;

    static const route_type_ route;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::auto_id_type_
  query_columns< ::polaris::io::Event, A >::
  auto_id (A::table_name, "\"auto_id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::hhold_type_
  query_columns< ::polaris::io::Event, A >::
  hhold (A::table_name, "\"hhold\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::person_type_
  query_columns< ::polaris::io::Event, A >::
  person (A::table_name, "\"person\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::tour_type_
  query_columns< ::polaris::io::Event, A >::
  tour (A::table_name, "\"tour\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::trip_type_
  query_columns< ::polaris::io::Event, A >::
  trip (A::table_name, "\"trip\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::mode_type_
  query_columns< ::polaris::io::Event, A >::
  mode (A::table_name, "\"mode\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::type_type_
  query_columns< ::polaris::io::Event, A >::
  type (A::table_name, "\"type\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::schedule_type_
  query_columns< ::polaris::io::Event, A >::
  schedule (A::table_name, "\"schedule\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::actual_type_
  query_columns< ::polaris::io::Event, A >::
  actual (A::table_name, "\"actual\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::link_type_
  query_columns< ::polaris::io::Event, A >::
  link (A::table_name, "\"link\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::dir_type_
  query_columns< ::polaris::io::Event, A >::
  dir (A::table_name, "\"dir\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::lane_type_
  query_columns< ::polaris::io::Event, A >::
  lane (A::table_name, "\"lane\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::offset_type_
  query_columns< ::polaris::io::Event, A >::
  offset (A::table_name, "\"offset\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Event, A >::route_type_
  query_columns< ::polaris::io::Event, A >::
  route (A::table_name, "\"route\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Event, A >:
    query_columns< ::polaris::io::Event, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Event >
  {
    public:
    typedef ::polaris::io::Event object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Event > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;
    static const bool auto_id = true;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // auto_id
      //
      long long auto_id_value;
      bool auto_id_null;

      // hhold
      //
      long long hhold_value;
      bool hhold_null;

      // person
      //
      long long person_value;
      bool person_null;

      // tour
      //
      long long tour_value;
      bool tour_null;

      // trip
      //
      long long trip_value;
      bool trip_null;

      // mode
      //
      long long mode_value;
      bool mode_null;

      // type
      //
      long long type_value;
      bool type_null;

      // schedule
      //
      double schedule_value;
      bool schedule_null;

      // actual
      //
      double actual_value;
      bool actual_null;

      // link
      //
      long long link_value;
      bool link_null;

      // dir
      //
      long long dir_value;
      bool dir_null;

      // lane
      //
      long long lane_value;
      bool lane_null;

      // offset
      //
      double offset_value;
      bool offset_null;

      // route
      //
      long long route_value;
      bool route_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 14UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };
}

#include "Result-odb.ixx"

#include <odb/post.hxx>

#endif // RESULT_ODB_HXX
