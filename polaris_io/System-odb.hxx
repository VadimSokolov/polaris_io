// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef SYSTEM_ODB_HXX
#define SYSTEM_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20100UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "System.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/tr1/wrapper-traits.hxx>
#include <odb/tr1/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/buffer.hxx>
#include <odb/details/unused.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // table_field
  //
  template <>
  struct class_traits< ::polaris::io::table_field >
  {
    static const class_kind kind = class_composite;
  };

  template <>
  class access::composite_value_traits< ::polaris::io::table_field >
  {
    public:
    typedef ::polaris::io::table_field value_type;

    struct image_type
    {
      // table
      //
      details::buffer table_value;
      std::size_t table_size;
      bool table_null;

      // field
      //
      details::buffer field_value;
      std::size_t field_size;
      bool field_null;
    };

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*, image_type&, sqlite::statement_kind);

    static bool
    init (image_type&, const value_type&, sqlite::statement_kind);

    static void
    init (value_type&, const image_type&, database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&, sqlite::statement_kind);
  };

  // Quantity
  //
  template <>
  struct class_traits< ::polaris::io::Quantity >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Quantity, A >
  {
    // tf
    //
    struct tf_type_
    {
      tf_type_ ()
      {
      }

      // table
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      table_type_;

      static const table_type_ table;

      // field
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      field_type_;

      static const field_type_ field;
    };

    static const tf_type_ tf;

    // quantity
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    quantity_type_;

    static const quantity_type_ quantity;
  };

  template <typename A>
  const typename pointer_query_columns< ::polaris::io::Quantity, A >::tf_type_::table_type_
  pointer_query_columns< ::polaris::io::Quantity, A >::tf_type_::
  table (A::table_name, "\"tf_table\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::polaris::io::Quantity, A >::tf_type_::field_type_
  pointer_query_columns< ::polaris::io::Quantity, A >::tf_type_::
  field (A::table_name, "\"tf_field\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::polaris::io::Quantity, A >::tf_type_
  pointer_query_columns< ::polaris::io::Quantity, A >::tf;

  template <typename A>
  const typename pointer_query_columns< ::polaris::io::Quantity, A >::quantity_type_
  pointer_query_columns< ::polaris::io::Quantity, A >::
  quantity (A::table_name, "\"quantity\"", 0);

  template <>
  class access::object_traits< ::polaris::io::Quantity >
  {
    public:
    typedef ::polaris::io::Quantity object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Quantity > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::polaris::io::table_field id_type;
    static const bool auto_id = false;

    struct id_image_type
    {
      composite_value_traits< ::polaris::io::table_field >::image_type id_value;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // tf
      //
      composite_value_traits< ::polaris::io::table_field >::image_type tf_value;

      // quantity
      //
      details::buffer quantity_value;
      std::size_t quantity_size;
      bool quantity_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 2UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Dimension
  //
  template <>
  struct class_traits< ::polaris::io::Dimension >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Dimension, A >
  {
    // quantity
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    quantity_type_;

    static const quantity_type_ quantity;

    // mass
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    mass_type_;

    static const mass_type_ mass;

    // length
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    length_type_;

    static const length_type_ length;

    // time
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    time_type_;

    static const time_type_ time;

    // lane
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    lane_type_;

    static const lane_type_ lane;

    // usd
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    usd_type_;

    static const usd_type_ usd;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Dimension, A >::quantity_type_
  query_columns< ::polaris::io::Dimension, A >::
  quantity (A::table_name, "\"quantity\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Dimension, A >::mass_type_
  query_columns< ::polaris::io::Dimension, A >::
  mass (A::table_name, "\"mass\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Dimension, A >::length_type_
  query_columns< ::polaris::io::Dimension, A >::
  length (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Dimension, A >::time_type_
  query_columns< ::polaris::io::Dimension, A >::
  time (A::table_name, "\"time\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Dimension, A >::lane_type_
  query_columns< ::polaris::io::Dimension, A >::
  lane (A::table_name, "\"lane\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Dimension, A >::usd_type_
  query_columns< ::polaris::io::Dimension, A >::
  usd (A::table_name, "\"usd\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Dimension, A >:
    query_columns< ::polaris::io::Dimension, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Dimension >
  {
    public:
    typedef ::polaris::io::Dimension object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Dimension > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;
    static const bool auto_id = false;

    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // quantity
      //
      details::buffer quantity_value;
      std::size_t quantity_size;
      bool quantity_null;

      // mass
      //
      long long mass_value;
      bool mass_null;

      // length
      //
      long long length_value;
      bool length_null;

      // time
      //
      long long time_value;
      bool time_null;

      // lane
      //
      long long lane_value;
      bool lane_null;

      // usd
      //
      long long usd_value;
      bool usd_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Meta
  //
  template <>
  struct class_traits< ::polaris::io::Meta >
  {
    static const class_kind kind = class_object;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Meta, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // key
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    key_type_;

    static const key_type_ key;

    // value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    value_type_;

    static const value_type_ value;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Meta, A >::id_type_
  query_columns< ::polaris::io::Meta, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Meta, A >::key_type_
  query_columns< ::polaris::io::Meta, A >::
  key (A::table_name, "\"key\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Meta, A >::value_type_
  query_columns< ::polaris::io::Meta, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  struct pointer_query_columns< ::polaris::io::Meta, A >:
    query_columns< ::polaris::io::Meta, A >
  {
  };

  template <>
  class access::object_traits< ::polaris::io::Meta >
  {
    public:
    typedef ::polaris::io::Meta object_type;
    typedef ::std::tr1::shared_ptr< ::polaris::io::Meta > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef int id_type;
    static const bool auto_id = false;

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static const bool abstract = false;

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // key
      //
      details::buffer key_value;
      std::size_t key_size;
      bool key_null;

      // value
      //
      details::buffer value_value;
      std::size_t value_size;
      bool value_null;

      std::size_t version;
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&, bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, sqlite::statement_kind);

    static void
    init (object_type&, const image_type&, database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    odb::pointer_cache_traits<pointer_type>
    pointer_cache_traits;
    typedef
    odb::reference_cache_traits<object_type>
    reference_cache_traits;

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query query_base_type;

    struct container_statement_cache_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static bool
    create_schema (database&, unsigned short pass, bool drop);

    public:
    static bool
    find_ (statements_type&, const id_type*);

    static void
    load_ (statements_type&, object_type&);
  };

  // Quantity
  //
  class quantity_alias_tag;

#ifndef ODB_ALIAS_TRAITS_QUANTITY_FOR_POLARIS_IO_DIMENSION
#define ODB_ALIAS_TRAITS_QUANTITY_FOR_POLARIS_IO_DIMENSION
  template <bool d>
  struct alias_traits< ::polaris::io::Dimension, quantity_alias_tag, d >
  {
    static const char table_name[];
  };

  template <bool d>
  const char alias_traits< ::polaris::io::Dimension, quantity_alias_tag, d >::
  table_name[] = "\"quantity\"";
#endif // ODB_ALIAS_TRAITS_QUANTITY_FOR_POLARIS_IO_DIMENSION

  template <>
  struct query_columns_base< ::polaris::io::Quantity >
  {
    // quantity
    //
    typedef
    odb::alias_traits< ::polaris::io::Dimension, quantity_alias_tag >
    quantity_alias_;
  };

  template <typename A>
  struct query_columns< ::polaris::io::Quantity, A >:
    query_columns_base< ::polaris::io::Quantity >
  {
    // tf
    //
    struct tf_type_
    {
      tf_type_ ()
      {
      }

      // table
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      table_type_;

      static const table_type_ table;

      // field
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      field_type_;

      static const field_type_ field;
    };

    static const tf_type_ tf;

    // quantity
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    quantity_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::polaris::io::Dimension,
        quantity_alias_ > >
    quantity_pointer_type_;

    struct quantity_type_: quantity_pointer_type_, quantity_column_type_
    {
      quantity_type_ ()
      {
      }

      quantity_type_ (const char* t, const char* c, const char* conv)
        : quantity_column_type_ (t, c, conv)
      {
      }
    };

    static const quantity_type_ quantity;
  };

  template <typename A>
  const typename query_columns< ::polaris::io::Quantity, A >::tf_type_::table_type_
  query_columns< ::polaris::io::Quantity, A >::tf_type_::
  table (A::table_name, "\"tf_table\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Quantity, A >::tf_type_::field_type_
  query_columns< ::polaris::io::Quantity, A >::tf_type_::
  field (A::table_name, "\"tf_field\"", 0);

  template <typename A>
  const typename query_columns< ::polaris::io::Quantity, A >::tf_type_
  query_columns< ::polaris::io::Quantity, A >::tf;

  template <typename A>
  const typename query_columns< ::polaris::io::Quantity, A >::quantity_type_
  query_columns< ::polaris::io::Quantity, A >::
  quantity (A::table_name, "\"quantity\"", 0);
}

#include "System-odb.ixx"

#include <odb/post.hxx>

#endif // SYSTEM_ODB_HXX
