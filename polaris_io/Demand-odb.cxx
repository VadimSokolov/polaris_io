// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Demand-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>

namespace odb
{
  // Selection
  //

  access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // hhold
    //
    t[1UL] = false;

    // person
    //
    t[2UL] = false;

    // tour
    //
    t[3UL] = false;

    // trip
    //
    t[4UL] = false;

    // type
    //
    t[5UL] = false;

    // partition
    //
    t[6UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // hhold
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.hhold_value;
    b[n].is_null = &i.hhold_null;
    n++;

    // person
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.person_value;
    b[n].is_null = &i.person_null;
    n++;

    // tour
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.tour_value;
    b[n].is_null = &i.tour_null;
    n++;

    // trip
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.trip_value;
    b[n].is_null = &i.trip_null;
    n++;

    // type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // partition
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.partition_value;
    b[n].is_null = &i.partition_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // hhold
    //
    {
      int const& v =
        o.hhold;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.hhold_value,
        is_null,
        v);
      i.hhold_null = is_null;
    }

    // person
    //
    {
      int const& v =
        o.person;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.person_value,
        is_null,
        v);
      i.person_null = is_null;
    }

    // tour
    //
    {
      int const& v =
        o.tour;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.tour_value,
        is_null,
        v);
      i.tour_null = is_null;
    }

    // trip
    //
    {
      int const& v =
        o.trip;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.trip_value,
        is_null,
        v);
      i.trip_null = is_null;
    }

    // type
    //
    {
      int const& v =
        o.type;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.type_value,
        is_null,
        v);
      i.type_null = is_null;
    }

    // partition
    //
    {
      int const& v =
        o.partition;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.partition_value,
        is_null,
        v);
      i.partition_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // hhold
    //
    {
      int& v =
        o.hhold;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.hhold_value,
        i.hhold_null);
    }

    // person
    //
    {
      int& v =
        o.person;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.person_value,
        i.person_null);
    }

    // tour
    //
    {
      int& v =
        o.tour;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.tour_value,
        i.tour_null);
    }

    // trip
    //
    {
      int& v =
        o.trip;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.trip_value,
        i.trip_null);
    }

    // type
    //
    {
      int& v =
        o.type;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // partition
    //
    {
      int& v =
        o.partition;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.partition_value,
        i.partition_null);
    }
  }

  void access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Selection\" ("
  "\"auto_id\","
  "\"hhold\","
  "\"person\","
  "\"tour\","
  "\"trip\","
  "\"type\","
  "\"partition\")"
  " VALUES (?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Selection\".\"auto_id\","
  "\"Selection\".\"hhold\","
  "\"Selection\".\"person\","
  "\"Selection\".\"tour\","
  "\"Selection\".\"trip\","
  "\"Selection\".\"type\","
  "\"Selection\".\"partition\""
  " FROM \"Selection\""
  " WHERE \"Selection\".\"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::update_statement[] =
  "UPDATE \"Selection\" SET "
  "\"hhold\"=?,"
  "\"person\"=?,"
  "\"tour\"=?,"
  "\"trip\"=?,"
  "\"type\"=?,"
  "\"partition\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Selection\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Selection\".\"auto_id\","
  "\"Selection\".\"hhold\","
  "\"Selection\".\"person\","
  "\"Selection\".\"tour\","
  "\"Selection\".\"trip\","
  "\"Selection\".\"type\","
  "\"Selection\".\"partition\""
  " FROM \"Selection\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Selection\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::table_name[] =
  "\"Selection\"";

  void access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Selection\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Selection\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"hhold\" INTEGER NOT NULL,\n"
                      "  \"person\" INTEGER NOT NULL,\n"
                      "  \"tour\" INTEGER NOT NULL,\n"
                      "  \"trip\" INTEGER NOT NULL,\n"
                      "  \"type\" INTEGER NOT NULL,\n"
                      "  \"partition\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Selection_ (
    id_sqlite,
    "Demand",
    &access::object_traits_impl< ::polaris::io::Selection, id_sqlite >::create_schema);

  // Household
  //

  access::object_traits_impl< ::polaris::io::Household, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // hhold
    //
    t[1UL] = false;

    // location
    //
    t[2UL] = false;

    // persons
    //
    t[3UL] = false;

    // workers
    //
    t[4UL] = false;

    // vehicles
    //
    t[5UL] = false;

    // type
    //
    t[6UL] = false;

    // partition
    //
    t[7UL] = false;

    // person
    //
    t[8UL] = false;

    // age
    //
    t[9UL] = false;

    // relate
    //
    t[10UL] = false;

    // gender
    //
    t[11UL] = false;

    // work
    //
    t[12UL] = false;

    // drive
    //
    t[13UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // hhold
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.hhold_value;
    b[n].is_null = &i.hhold_null;
    n++;

    // location
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.location_value;
    b[n].is_null = &i.location_null;
    n++;

    // persons
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.persons_value;
    b[n].is_null = &i.persons_null;
    n++;

    // workers
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.workers_value;
    b[n].is_null = &i.workers_null;
    n++;

    // vehicles
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.vehicles_value;
    b[n].is_null = &i.vehicles_null;
    n++;

    // type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // partition
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.partition_value;
    b[n].is_null = &i.partition_null;
    n++;

    // person
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.person_value;
    b[n].is_null = &i.person_null;
    n++;

    // age
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.age_value;
    b[n].is_null = &i.age_null;
    n++;

    // relate
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.relate_value;
    b[n].is_null = &i.relate_null;
    n++;

    // gender
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.gender_value;
    b[n].is_null = &i.gender_null;
    n++;

    // work
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.work_value;
    b[n].is_null = &i.work_null;
    n++;

    // drive
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.drive_value;
    b[n].is_null = &i.drive_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // hhold
    //
    {
      int const& v =
        o.hhold;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.hhold_value,
        is_null,
        v);
      i.hhold_null = is_null;
    }

    // location
    //
    {
      int const& v =
        o.location;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.location_value,
        is_null,
        v);
      i.location_null = is_null;
    }

    // persons
    //
    {
      int const& v =
        o.persons;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.persons_value,
        is_null,
        v);
      i.persons_null = is_null;
    }

    // workers
    //
    {
      int const& v =
        o.workers;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.workers_value,
        is_null,
        v);
      i.workers_null = is_null;
    }

    // vehicles
    //
    {
      int const& v =
        o.vehicles;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.vehicles_value,
        is_null,
        v);
      i.vehicles_null = is_null;
    }

    // type
    //
    {
      int const& v =
        o.type;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.type_value,
        is_null,
        v);
      i.type_null = is_null;
    }

    // partition
    //
    {
      int const& v =
        o.partition;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.partition_value,
        is_null,
        v);
      i.partition_null = is_null;
    }

    // person
    //
    {
      int const& v =
        o.person;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.person_value,
        is_null,
        v);
      i.person_null = is_null;
    }

    // age
    //
    {
      int const& v =
        o.age;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.age_value,
        is_null,
        v);
      i.age_null = is_null;
    }

    // relate
    //
    {
      int const& v =
        o.relate;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.relate_value,
        is_null,
        v);
      i.relate_null = is_null;
    }

    // gender
    //
    {
      int const& v =
        o.gender;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.gender_value,
        is_null,
        v);
      i.gender_null = is_null;
    }

    // work
    //
    {
      int const& v =
        o.work;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.work_value,
        is_null,
        v);
      i.work_null = is_null;
    }

    // drive
    //
    {
      int const& v =
        o.drive;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.drive_value,
        is_null,
        v);
      i.drive_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // hhold
    //
    {
      int& v =
        o.hhold;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.hhold_value,
        i.hhold_null);
    }

    // location
    //
    {
      int& v =
        o.location;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.location_value,
        i.location_null);
    }

    // persons
    //
    {
      int& v =
        o.persons;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.persons_value,
        i.persons_null);
    }

    // workers
    //
    {
      int& v =
        o.workers;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.workers_value,
        i.workers_null);
    }

    // vehicles
    //
    {
      int& v =
        o.vehicles;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.vehicles_value,
        i.vehicles_null);
    }

    // type
    //
    {
      int& v =
        o.type;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // partition
    //
    {
      int& v =
        o.partition;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.partition_value,
        i.partition_null);
    }

    // person
    //
    {
      int& v =
        o.person;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.person_value,
        i.person_null);
    }

    // age
    //
    {
      int& v =
        o.age;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.age_value,
        i.age_null);
    }

    // relate
    //
    {
      int& v =
        o.relate;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.relate_value,
        i.relate_null);
    }

    // gender
    //
    {
      int& v =
        o.gender;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.gender_value,
        i.gender_null);
    }

    // work
    //
    {
      int& v =
        o.work;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.work_value,
        i.work_null);
    }

    // drive
    //
    {
      int& v =
        o.drive;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.drive_value,
        i.drive_null);
    }
  }

  void access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::polaris::io::Household, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Household, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Household\" ("
  "\"auto_id\","
  "\"hhold\","
  "\"location\","
  "\"persons\","
  "\"workers\","
  "\"vehicles\","
  "\"type\","
  "\"partition\","
  "\"person\","
  "\"age\","
  "\"relate\","
  "\"gender\","
  "\"work\","
  "\"drive\")"
  " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Household, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Household\".\"auto_id\","
  "\"Household\".\"hhold\","
  "\"Household\".\"location\","
  "\"Household\".\"persons\","
  "\"Household\".\"workers\","
  "\"Household\".\"vehicles\","
  "\"Household\".\"type\","
  "\"Household\".\"partition\","
  "\"Household\".\"person\","
  "\"Household\".\"age\","
  "\"Household\".\"relate\","
  "\"Household\".\"gender\","
  "\"Household\".\"work\","
  "\"Household\".\"drive\""
  " FROM \"Household\""
  " WHERE \"Household\".\"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Household, id_sqlite >::update_statement[] =
  "UPDATE \"Household\" SET "
  "\"hhold\"=?,"
  "\"location\"=?,"
  "\"persons\"=?,"
  "\"workers\"=?,"
  "\"vehicles\"=?,"
  "\"type\"=?,"
  "\"partition\"=?,"
  "\"person\"=?,"
  "\"age\"=?,"
  "\"relate\"=?,"
  "\"gender\"=?,"
  "\"work\"=?,"
  "\"drive\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Household, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Household\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Household, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Household\".\"auto_id\","
  "\"Household\".\"hhold\","
  "\"Household\".\"location\","
  "\"Household\".\"persons\","
  "\"Household\".\"workers\","
  "\"Household\".\"vehicles\","
  "\"Household\".\"type\","
  "\"Household\".\"partition\","
  "\"Household\".\"person\","
  "\"Household\".\"age\","
  "\"Household\".\"relate\","
  "\"Household\".\"gender\","
  "\"Household\".\"work\","
  "\"Household\".\"drive\""
  " FROM \"Household\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Household, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Household\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Household, id_sqlite >::table_name[] =
  "\"Household\"";

  void access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Household, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Household, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Household, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Household\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Household\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"hhold\" INTEGER NOT NULL,\n"
                      "  \"location\" INTEGER NOT NULL,\n"
                      "  \"persons\" INTEGER NOT NULL,\n"
                      "  \"workers\" INTEGER NOT NULL,\n"
                      "  \"vehicles\" INTEGER NOT NULL,\n"
                      "  \"type\" INTEGER NOT NULL,\n"
                      "  \"partition\" INTEGER NOT NULL,\n"
                      "  \"person\" INTEGER NOT NULL,\n"
                      "  \"age\" INTEGER NOT NULL,\n"
                      "  \"relate\" INTEGER NOT NULL,\n"
                      "  \"gender\" INTEGER NOT NULL,\n"
                      "  \"work\" INTEGER NOT NULL,\n"
                      "  \"drive\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Household_ (
    id_sqlite,
    "Demand",
    &access::object_traits_impl< ::polaris::io::Household, id_sqlite >::create_schema);

  // Vehicle
  //

  access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // hhold
    //
    t[1UL] = false;

    // vehicle
    //
    t[2UL] = false;

    // parking
    //
    t[3UL] = false;

    // type
    //
    t[4UL] = false;

    // subtype
    //
    t[5UL] = false;

    // partition
    //
    t[6UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // hhold
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.hhold_value;
    b[n].is_null = &i.hhold_null;
    n++;

    // vehicle
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.vehicle_value;
    b[n].is_null = &i.vehicle_null;
    n++;

    // parking
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.parking_value;
    b[n].is_null = &i.parking_null;
    n++;

    // type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // subtype
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.subtype_value;
    b[n].is_null = &i.subtype_null;
    n++;

    // partition
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.partition_value;
    b[n].is_null = &i.partition_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // hhold
    //
    {
      int const& v =
        o.hhold;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.hhold_value,
        is_null,
        v);
      i.hhold_null = is_null;
    }

    // vehicle
    //
    {
      int const& v =
        o.vehicle;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.vehicle_value,
        is_null,
        v);
      i.vehicle_null = is_null;
    }

    // parking
    //
    {
      int const& v =
        o.parking;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.parking_value,
        is_null,
        v);
      i.parking_null = is_null;
    }

    // type
    //
    {
      int const& v =
        o.type;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.type_value,
        is_null,
        v);
      i.type_null = is_null;
    }

    // subtype
    //
    {
      int const& v =
        o.subtype;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.subtype_value,
        is_null,
        v);
      i.subtype_null = is_null;
    }

    // partition
    //
    {
      int const& v =
        o.partition;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.partition_value,
        is_null,
        v);
      i.partition_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // hhold
    //
    {
      int& v =
        o.hhold;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.hhold_value,
        i.hhold_null);
    }

    // vehicle
    //
    {
      int& v =
        o.vehicle;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.vehicle_value,
        i.vehicle_null);
    }

    // parking
    //
    {
      int& v =
        o.parking;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.parking_value,
        i.parking_null);
    }

    // type
    //
    {
      int& v =
        o.type;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // subtype
    //
    {
      int& v =
        o.subtype;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.subtype_value,
        i.subtype_null);
    }

    // partition
    //
    {
      int& v =
        o.partition;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.partition_value,
        i.partition_null);
    }
  }

  void access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Vehicle\" ("
  "\"auto_id\","
  "\"hhold\","
  "\"vehicle\","
  "\"parking\","
  "\"type\","
  "\"subtype\","
  "\"partition\")"
  " VALUES (?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Vehicle\".\"auto_id\","
  "\"Vehicle\".\"hhold\","
  "\"Vehicle\".\"vehicle\","
  "\"Vehicle\".\"parking\","
  "\"Vehicle\".\"type\","
  "\"Vehicle\".\"subtype\","
  "\"Vehicle\".\"partition\""
  " FROM \"Vehicle\""
  " WHERE \"Vehicle\".\"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::update_statement[] =
  "UPDATE \"Vehicle\" SET "
  "\"hhold\"=?,"
  "\"vehicle\"=?,"
  "\"parking\"=?,"
  "\"type\"=?,"
  "\"subtype\"=?,"
  "\"partition\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Vehicle\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Vehicle\".\"auto_id\","
  "\"Vehicle\".\"hhold\","
  "\"Vehicle\".\"vehicle\","
  "\"Vehicle\".\"parking\","
  "\"Vehicle\".\"type\","
  "\"Vehicle\".\"subtype\","
  "\"Vehicle\".\"partition\""
  " FROM \"Vehicle\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Vehicle\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::table_name[] =
  "\"Vehicle\"";

  void access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Vehicle\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Vehicle\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"hhold\" INTEGER NOT NULL,\n"
                      "  \"vehicle\" INTEGER NOT NULL,\n"
                      "  \"parking\" INTEGER NOT NULL,\n"
                      "  \"type\" INTEGER NOT NULL,\n"
                      "  \"subtype\" INTEGER NOT NULL,\n"
                      "  \"partition\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Vehicle_ (
    id_sqlite,
    "Demand",
    &access::object_traits_impl< ::polaris::io::Vehicle, id_sqlite >::create_schema);

  // Trip
  //

  access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // hhold
    //
    t[1UL] = false;

    // person
    //
    t[2UL] = false;

    // tour
    //
    t[3UL] = false;

    // trip
    //
    t[4UL] = false;

    // start
    //
    t[5UL] = false;

    // end
    //
    t[6UL] = false;

    // duration
    //
    t[7UL] = false;

    // origin
    //
    t[8UL] = false;

    // destination
    //
    t[9UL] = false;

    // purpose
    //
    t[10UL] = false;

    // mode
    //
    t[11UL] = false;

    // constraint
    //
    t[12UL] = false;

    // priority
    //
    t[13UL] = false;

    // vehicle
    //
    t[14UL] = false;

    // passengers
    //
    t[15UL] = false;

    // type
    //
    t[16UL] = false;

    // partition
    //
    t[17UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // hhold
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.hhold_value;
    b[n].is_null = &i.hhold_null;
    n++;

    // person
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.person_value;
    b[n].is_null = &i.person_null;
    n++;

    // tour
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.tour_value;
    b[n].is_null = &i.tour_null;
    n++;

    // trip
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.trip_value;
    b[n].is_null = &i.trip_null;
    n++;

    // start
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.start_value;
    b[n].is_null = &i.start_null;
    n++;

    // end
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.end_value;
    b[n].is_null = &i.end_null;
    n++;

    // duration
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.duration_value;
    b[n].is_null = &i.duration_null;
    n++;

    // origin
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.origin_value;
    b[n].is_null = &i.origin_null;
    n++;

    // destination
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.destination_value;
    b[n].is_null = &i.destination_null;
    n++;

    // purpose
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.purpose_value;
    b[n].is_null = &i.purpose_null;
    n++;

    // mode
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.mode_value;
    b[n].is_null = &i.mode_null;
    n++;

    // constraint
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.constraint_value;
    b[n].is_null = &i.constraint_null;
    n++;

    // priority
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.priority_value;
    b[n].is_null = &i.priority_null;
    n++;

    // vehicle
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.vehicle_value;
    b[n].is_null = &i.vehicle_null;
    n++;

    // passengers
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.passengers_value;
    b[n].is_null = &i.passengers_null;
    n++;

    // type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // partition
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.partition_value;
    b[n].is_null = &i.partition_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // hhold
    //
    {
      int const& v =
        o.hhold;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.hhold_value,
        is_null,
        v);
      i.hhold_null = is_null;
    }

    // person
    //
    {
      int const& v =
        o.person;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.person_value,
        is_null,
        v);
      i.person_null = is_null;
    }

    // tour
    //
    {
      int const& v =
        o.tour;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.tour_value,
        is_null,
        v);
      i.tour_null = is_null;
    }

    // trip
    //
    {
      int const& v =
        o.trip;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.trip_value,
        is_null,
        v);
      i.trip_null = is_null;
    }

    // start
    //
    {
      double const& v =
        o.start;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.start_value,
        is_null,
        v);
      i.start_null = is_null;
    }

    // end
    //
    {
      double const& v =
        o.end;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.end_value,
        is_null,
        v);
      i.end_null = is_null;
    }

    // duration
    //
    {
      double const& v =
        o.duration;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.duration_value,
        is_null,
        v);
      i.duration_null = is_null;
    }

    // origin
    //
    {
      int const& v =
        o.origin;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.origin_value,
        is_null,
        v);
      i.origin_null = is_null;
    }

    // destination
    //
    {
      int const& v =
        o.destination;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.destination_value,
        is_null,
        v);
      i.destination_null = is_null;
    }

    // purpose
    //
    {
      int const& v =
        o.purpose;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.purpose_value,
        is_null,
        v);
      i.purpose_null = is_null;
    }

    // mode
    //
    {
      int const& v =
        o.mode;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.mode_value,
        is_null,
        v);
      i.mode_null = is_null;
    }

    // constraint
    //
    {
      int const& v =
        o.constraint;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.constraint_value,
        is_null,
        v);
      i.constraint_null = is_null;
    }

    // priority
    //
    {
      int const& v =
        o.priority;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.priority_value,
        is_null,
        v);
      i.priority_null = is_null;
    }

    // vehicle
    //
    {
      int const& v =
        o.vehicle;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.vehicle_value,
        is_null,
        v);
      i.vehicle_null = is_null;
    }

    // passengers
    //
    {
      int const& v =
        o.passengers;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.passengers_value,
        is_null,
        v);
      i.passengers_null = is_null;
    }

    // type
    //
    {
      int const& v =
        o.type;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.type_value,
        is_null,
        v);
      i.type_null = is_null;
    }

    // partition
    //
    {
      int const& v =
        o.partition;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.partition_value,
        is_null,
        v);
      i.partition_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // hhold
    //
    {
      int& v =
        o.hhold;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.hhold_value,
        i.hhold_null);
    }

    // person
    //
    {
      int& v =
        o.person;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.person_value,
        i.person_null);
    }

    // tour
    //
    {
      int& v =
        o.tour;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.tour_value,
        i.tour_null);
    }

    // trip
    //
    {
      int& v =
        o.trip;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.trip_value,
        i.trip_null);
    }

    // start
    //
    {
      double& v =
        o.start;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.start_value,
        i.start_null);
    }

    // end
    //
    {
      double& v =
        o.end;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.end_value,
        i.end_null);
    }

    // duration
    //
    {
      double& v =
        o.duration;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.duration_value,
        i.duration_null);
    }

    // origin
    //
    {
      int& v =
        o.origin;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.origin_value,
        i.origin_null);
    }

    // destination
    //
    {
      int& v =
        o.destination;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.destination_value,
        i.destination_null);
    }

    // purpose
    //
    {
      int& v =
        o.purpose;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.purpose_value,
        i.purpose_null);
    }

    // mode
    //
    {
      int& v =
        o.mode;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.mode_value,
        i.mode_null);
    }

    // constraint
    //
    {
      int& v =
        o.constraint;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.constraint_value,
        i.constraint_null);
    }

    // priority
    //
    {
      int& v =
        o.priority;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.priority_value,
        i.priority_null);
    }

    // vehicle
    //
    {
      int& v =
        o.vehicle;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.vehicle_value,
        i.vehicle_null);
    }

    // passengers
    //
    {
      int& v =
        o.passengers;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.passengers_value,
        i.passengers_null);
    }

    // type
    //
    {
      int& v =
        o.type;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // partition
    //
    {
      int& v =
        o.partition;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.partition_value,
        i.partition_null);
    }
  }

  void access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Trip\" ("
  "\"auto_id\","
  "\"hhold\","
  "\"person\","
  "\"tour\","
  "\"trip\","
  "\"start\","
  "\"end\","
  "\"duration\","
  "\"origin\","
  "\"destination\","
  "\"purpose\","
  "\"mode\","
  "\"constraint\","
  "\"priority\","
  "\"vehicle\","
  "\"passengers\","
  "\"type\","
  "\"partition\")"
  " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Trip\".\"auto_id\","
  "\"Trip\".\"hhold\","
  "\"Trip\".\"person\","
  "\"Trip\".\"tour\","
  "\"Trip\".\"trip\","
  "\"Trip\".\"start\","
  "\"Trip\".\"end\","
  "\"Trip\".\"duration\","
  "\"Trip\".\"origin\","
  "\"Trip\".\"destination\","
  "\"Trip\".\"purpose\","
  "\"Trip\".\"mode\","
  "\"Trip\".\"constraint\","
  "\"Trip\".\"priority\","
  "\"Trip\".\"vehicle\","
  "\"Trip\".\"passengers\","
  "\"Trip\".\"type\","
  "\"Trip\".\"partition\""
  " FROM \"Trip\""
  " WHERE \"Trip\".\"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::update_statement[] =
  "UPDATE \"Trip\" SET "
  "\"hhold\"=?,"
  "\"person\"=?,"
  "\"tour\"=?,"
  "\"trip\"=?,"
  "\"start\"=?,"
  "\"end\"=?,"
  "\"duration\"=?,"
  "\"origin\"=?,"
  "\"destination\"=?,"
  "\"purpose\"=?,"
  "\"mode\"=?,"
  "\"constraint\"=?,"
  "\"priority\"=?,"
  "\"vehicle\"=?,"
  "\"passengers\"=?,"
  "\"type\"=?,"
  "\"partition\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Trip\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Trip\".\"auto_id\","
  "\"Trip\".\"hhold\","
  "\"Trip\".\"person\","
  "\"Trip\".\"tour\","
  "\"Trip\".\"trip\","
  "\"Trip\".\"start\","
  "\"Trip\".\"end\","
  "\"Trip\".\"duration\","
  "\"Trip\".\"origin\","
  "\"Trip\".\"destination\","
  "\"Trip\".\"purpose\","
  "\"Trip\".\"mode\","
  "\"Trip\".\"constraint\","
  "\"Trip\".\"priority\","
  "\"Trip\".\"vehicle\","
  "\"Trip\".\"passengers\","
  "\"Trip\".\"type\","
  "\"Trip\".\"partition\""
  " FROM \"Trip\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Trip\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::table_name[] =
  "\"Trip\"";

  void access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Trip\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Trip\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"hhold\" INTEGER NOT NULL,\n"
                      "  \"person\" INTEGER NOT NULL,\n"
                      "  \"tour\" INTEGER NOT NULL,\n"
                      "  \"trip\" INTEGER NOT NULL,\n"
                      "  \"start\" REAL,\n"
                      "  \"end\" REAL,\n"
                      "  \"duration\" REAL,\n"
                      "  \"origin\" INTEGER NOT NULL,\n"
                      "  \"destination\" INTEGER NOT NULL,\n"
                      "  \"purpose\" INTEGER NOT NULL,\n"
                      "  \"mode\" INTEGER NOT NULL,\n"
                      "  \"constraint\" INTEGER NOT NULL,\n"
                      "  \"priority\" INTEGER NOT NULL,\n"
                      "  \"vehicle\" INTEGER NOT NULL,\n"
                      "  \"passengers\" INTEGER NOT NULL,\n"
                      "  \"type\" INTEGER NOT NULL,\n"
                      "  \"partition\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Trip_ (
    id_sqlite,
    "Demand",
    &access::object_traits_impl< ::polaris::io::Trip, id_sqlite >::create_schema);

  // Plan
  //

  access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // depart
    //
    t[1UL] = false;

    // arrive
    //
    t[2UL] = false;

    // activity
    //
    t[3UL] = false;

    // walk
    //
    t[4UL] = false;

    // drive
    //
    t[5UL] = false;

    // transit
    //
    t[6UL] = false;

    // wait
    //
    t[7UL] = false;

    // other
    //
    t[8UL] = false;

    // length
    //
    t[9UL] = false;

    // cost
    //
    t[10UL] = false;

    // impedance
    //
    t[11UL] = false;

    // leg_mode
    //
    t[12UL] = false;

    // leg_type
    //
    t[13UL] = false;

    // leg_id
    //
    t[14UL] = false;

    // leg_time
    //
    t[15UL] = false;

    // leg_length
    //
    t[16UL] = false;

    // leg_cost
    //
    t[17UL] = false;

    // leg_imp
    //
    t[18UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // depart
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.depart_value;
    b[n].is_null = &i.depart_null;
    n++;

    // arrive
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.arrive_value;
    b[n].is_null = &i.arrive_null;
    n++;

    // activity
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.activity_value;
    b[n].is_null = &i.activity_null;
    n++;

    // walk
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.walk_value;
    b[n].is_null = &i.walk_null;
    n++;

    // drive
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.drive_value;
    b[n].is_null = &i.drive_null;
    n++;

    // transit
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.transit_value;
    b[n].is_null = &i.transit_null;
    n++;

    // wait
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.wait_value;
    b[n].is_null = &i.wait_null;
    n++;

    // other
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.other_value;
    b[n].is_null = &i.other_null;
    n++;

    // length
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.length_value;
    b[n].is_null = &i.length_null;
    n++;

    // cost
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.cost_value;
    b[n].is_null = &i.cost_null;
    n++;

    // impedance
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.impedance_value;
    b[n].is_null = &i.impedance_null;
    n++;

    // leg_mode
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.leg_mode_value;
    b[n].is_null = &i.leg_mode_null;
    n++;

    // leg_type
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.leg_type_value;
    b[n].is_null = &i.leg_type_null;
    n++;

    // leg_id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.leg_id_value;
    b[n].is_null = &i.leg_id_null;
    n++;

    // leg_time
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.leg_time_value;
    b[n].is_null = &i.leg_time_null;
    n++;

    // leg_length
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.leg_length_value;
    b[n].is_null = &i.leg_length_null;
    n++;

    // leg_cost
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.leg_cost_value;
    b[n].is_null = &i.leg_cost_null;
    n++;

    // leg_imp
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.leg_imp_value;
    b[n].is_null = &i.leg_imp_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // depart
    //
    {
      double const& v =
        o.depart;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.depart_value,
        is_null,
        v);
      i.depart_null = is_null;
    }

    // arrive
    //
    {
      double const& v =
        o.arrive;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.arrive_value,
        is_null,
        v);
      i.arrive_null = is_null;
    }

    // activity
    //
    {
      double const& v =
        o.activity;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.activity_value,
        is_null,
        v);
      i.activity_null = is_null;
    }

    // walk
    //
    {
      double const& v =
        o.walk;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.walk_value,
        is_null,
        v);
      i.walk_null = is_null;
    }

    // drive
    //
    {
      double const& v =
        o.drive;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.drive_value,
        is_null,
        v);
      i.drive_null = is_null;
    }

    // transit
    //
    {
      double const& v =
        o.transit;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.transit_value,
        is_null,
        v);
      i.transit_null = is_null;
    }

    // wait
    //
    {
      double const& v =
        o.wait;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.wait_value,
        is_null,
        v);
      i.wait_null = is_null;
    }

    // other
    //
    {
      double const& v =
        o.other;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.other_value,
        is_null,
        v);
      i.other_null = is_null;
    }

    // length
    //
    {
      double const& v =
        o.length;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.length_value,
        is_null,
        v);
      i.length_null = is_null;
    }

    // cost
    //
    {
      double const& v =
        o.cost;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.cost_value,
        is_null,
        v);
      i.cost_null = is_null;
    }

    // impedance
    //
    {
      int const& v =
        o.impedance;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.impedance_value,
        is_null,
        v);
      i.impedance_null = is_null;
    }

    // leg_mode
    //
    {
      int const& v =
        o.leg_mode;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.leg_mode_value,
        is_null,
        v);
      i.leg_mode_null = is_null;
    }

    // leg_type
    //
    {
      int const& v =
        o.leg_type;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.leg_type_value,
        is_null,
        v);
      i.leg_type_null = is_null;
    }

    // leg_id
    //
    {
      int const& v =
        o.leg_id;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.leg_id_value,
        is_null,
        v);
      i.leg_id_null = is_null;
    }

    // leg_time
    //
    {
      double const& v =
        o.leg_time;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.leg_time_value,
        is_null,
        v);
      i.leg_time_null = is_null;
    }

    // leg_length
    //
    {
      double const& v =
        o.leg_length;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.leg_length_value,
        is_null,
        v);
      i.leg_length_null = is_null;
    }

    // leg_cost
    //
    {
      double const& v =
        o.leg_cost;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.leg_cost_value,
        is_null,
        v);
      i.leg_cost_null = is_null;
    }

    // leg_imp
    //
    {
      int const& v =
        o.leg_imp;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.leg_imp_value,
        is_null,
        v);
      i.leg_imp_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // depart
    //
    {
      double& v =
        o.depart;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.depart_value,
        i.depart_null);
    }

    // arrive
    //
    {
      double& v =
        o.arrive;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.arrive_value,
        i.arrive_null);
    }

    // activity
    //
    {
      double& v =
        o.activity;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.activity_value,
        i.activity_null);
    }

    // walk
    //
    {
      double& v =
        o.walk;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.walk_value,
        i.walk_null);
    }

    // drive
    //
    {
      double& v =
        o.drive;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.drive_value,
        i.drive_null);
    }

    // transit
    //
    {
      double& v =
        o.transit;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.transit_value,
        i.transit_null);
    }

    // wait
    //
    {
      double& v =
        o.wait;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.wait_value,
        i.wait_null);
    }

    // other
    //
    {
      double& v =
        o.other;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.other_value,
        i.other_null);
    }

    // length
    //
    {
      double& v =
        o.length;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.length_value,
        i.length_null);
    }

    // cost
    //
    {
      double& v =
        o.cost;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.cost_value,
        i.cost_null);
    }

    // impedance
    //
    {
      int& v =
        o.impedance;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.impedance_value,
        i.impedance_null);
    }

    // leg_mode
    //
    {
      int& v =
        o.leg_mode;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.leg_mode_value,
        i.leg_mode_null);
    }

    // leg_type
    //
    {
      int& v =
        o.leg_type;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.leg_type_value,
        i.leg_type_null);
    }

    // leg_id
    //
    {
      int& v =
        o.leg_id;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.leg_id_value,
        i.leg_id_null);
    }

    // leg_time
    //
    {
      double& v =
        o.leg_time;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.leg_time_value,
        i.leg_time_null);
    }

    // leg_length
    //
    {
      double& v =
        o.leg_length;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.leg_length_value,
        i.leg_length_null);
    }

    // leg_cost
    //
    {
      double& v =
        o.leg_cost;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.leg_cost_value,
        i.leg_cost_null);
    }

    // leg_imp
    //
    {
      int& v =
        o.leg_imp;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.leg_imp_value,
        i.leg_imp_null);
    }
  }

  void access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Plan\" ("
  "\"auto_id\","
  "\"depart\","
  "\"arrive\","
  "\"activity\","
  "\"walk\","
  "\"drive\","
  "\"transit\","
  "\"wait\","
  "\"other\","
  "\"length\","
  "\"cost\","
  "\"impedance\","
  "\"leg_mode\","
  "\"leg_type\","
  "\"leg_id\","
  "\"leg_time\","
  "\"leg_length\","
  "\"leg_cost\","
  "\"leg_imp\")"
  " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Plan\".\"auto_id\","
  "\"Plan\".\"depart\","
  "\"Plan\".\"arrive\","
  "\"Plan\".\"activity\","
  "\"Plan\".\"walk\","
  "\"Plan\".\"drive\","
  "\"Plan\".\"transit\","
  "\"Plan\".\"wait\","
  "\"Plan\".\"other\","
  "\"Plan\".\"length\","
  "\"Plan\".\"cost\","
  "\"Plan\".\"impedance\","
  "\"Plan\".\"leg_mode\","
  "\"Plan\".\"leg_type\","
  "\"Plan\".\"leg_id\","
  "\"Plan\".\"leg_time\","
  "\"Plan\".\"leg_length\","
  "\"Plan\".\"leg_cost\","
  "\"Plan\".\"leg_imp\""
  " FROM \"Plan\""
  " WHERE \"Plan\".\"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::update_statement[] =
  "UPDATE \"Plan\" SET "
  "\"depart\"=?,"
  "\"arrive\"=?,"
  "\"activity\"=?,"
  "\"walk\"=?,"
  "\"drive\"=?,"
  "\"transit\"=?,"
  "\"wait\"=?,"
  "\"other\"=?,"
  "\"length\"=?,"
  "\"cost\"=?,"
  "\"impedance\"=?,"
  "\"leg_mode\"=?,"
  "\"leg_type\"=?,"
  "\"leg_id\"=?,"
  "\"leg_time\"=?,"
  "\"leg_length\"=?,"
  "\"leg_cost\"=?,"
  "\"leg_imp\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Plan\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Plan\".\"auto_id\","
  "\"Plan\".\"depart\","
  "\"Plan\".\"arrive\","
  "\"Plan\".\"activity\","
  "\"Plan\".\"walk\","
  "\"Plan\".\"drive\","
  "\"Plan\".\"transit\","
  "\"Plan\".\"wait\","
  "\"Plan\".\"other\","
  "\"Plan\".\"length\","
  "\"Plan\".\"cost\","
  "\"Plan\".\"impedance\","
  "\"Plan\".\"leg_mode\","
  "\"Plan\".\"leg_type\","
  "\"Plan\".\"leg_id\","
  "\"Plan\".\"leg_time\","
  "\"Plan\".\"leg_length\","
  "\"Plan\".\"leg_cost\","
  "\"Plan\".\"leg_imp\""
  " FROM \"Plan\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Plan\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::table_name[] =
  "\"Plan\"";

  void access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Plan\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Plan\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"depart\" REAL,\n"
                      "  \"arrive\" REAL,\n"
                      "  \"activity\" REAL,\n"
                      "  \"walk\" REAL,\n"
                      "  \"drive\" REAL,\n"
                      "  \"transit\" REAL,\n"
                      "  \"wait\" REAL,\n"
                      "  \"other\" REAL,\n"
                      "  \"length\" REAL,\n"
                      "  \"cost\" REAL,\n"
                      "  \"impedance\" INTEGER NOT NULL,\n"
                      "  \"leg_mode\" INTEGER NOT NULL,\n"
                      "  \"leg_type\" INTEGER NOT NULL,\n"
                      "  \"leg_id\" INTEGER NOT NULL,\n"
                      "  \"leg_time\" REAL,\n"
                      "  \"leg_length\" REAL,\n"
                      "  \"leg_cost\" REAL,\n"
                      "  \"leg_imp\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Plan_ (
    id_sqlite,
    "Demand",
    &access::object_traits_impl< ::polaris::io::Plan, id_sqlite >::create_schema);

  // Traveler
  //

  access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::id_type
  access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.auto_id_value,
        i.auto_id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // auto_id
    //
    t[0UL] = false;

    // hhold
    //
    t[1UL] = false;

    // person
    //
    t[2UL] = false;

    // tour
    //
    t[3UL] = false;

    // trip
    //
    t[4UL] = false;

    // mode
    //
    t[5UL] = false;

    // time
    //
    t[6UL] = false;

    // distance
    //
    t[7UL] = false;

    // speed
    //
    t[8UL] = false;

    // link
    //
    t[9UL] = false;

    // dir
    //
    t[10UL] = false;

    // lane
    //
    t[11UL] = false;

    // offset
    //
    t[12UL] = false;

    // route
    //
    t[13UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // auto_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.auto_id_value;
      b[n].is_null = &i.auto_id_null;
      n++;
    }

    // hhold
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.hhold_value;
    b[n].is_null = &i.hhold_null;
    n++;

    // person
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.person_value;
    b[n].is_null = &i.person_null;
    n++;

    // tour
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.tour_value;
    b[n].is_null = &i.tour_null;
    n++;

    // trip
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.trip_value;
    b[n].is_null = &i.trip_null;
    n++;

    // mode
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.mode_value;
    b[n].is_null = &i.mode_null;
    n++;

    // time
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.time_value;
    b[n].is_null = &i.time_null;
    n++;

    // distance
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.distance_value;
    b[n].is_null = &i.distance_null;
    n++;

    // speed
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.speed_value;
    b[n].is_null = &i.speed_null;
    n++;

    // link
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.link_value;
    b[n].is_null = &i.link_null;
    n++;

    // dir
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.dir_value;
    b[n].is_null = &i.dir_null;
    n++;

    // lane
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.lane_value;
    b[n].is_null = &i.lane_null;
    n++;

    // offset
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.offset_value;
    b[n].is_null = &i.offset_null;
    n++;

    // route
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.route_value;
    b[n].is_null = &i.route_null;
    n++;
  }

  void access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  init (image_type& i, const object_type& o, sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // auto_id
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.auto_id;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.auto_id_value,
        is_null,
        v);
      i.auto_id_null = is_null;
    }

    // hhold
    //
    {
      int const& v =
        o.hhold;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.hhold_value,
        is_null,
        v);
      i.hhold_null = is_null;
    }

    // person
    //
    {
      int const& v =
        o.person;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.person_value,
        is_null,
        v);
      i.person_null = is_null;
    }

    // tour
    //
    {
      int const& v =
        o.tour;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.tour_value,
        is_null,
        v);
      i.tour_null = is_null;
    }

    // trip
    //
    {
      int const& v =
        o.trip;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.trip_value,
        is_null,
        v);
      i.trip_null = is_null;
    }

    // mode
    //
    {
      int const& v =
        o.mode;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.mode_value,
        is_null,
        v);
      i.mode_null = is_null;
    }

    // time
    //
    {
      double const& v =
        o.time;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.time_value,
        is_null,
        v);
      i.time_null = is_null;
    }

    // distance
    //
    {
      double const& v =
        o.distance;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.distance_value,
        is_null,
        v);
      i.distance_null = is_null;
    }

    // speed
    //
    {
      double const& v =
        o.speed;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.speed_value,
        is_null,
        v);
      i.speed_null = is_null;
    }

    // link
    //
    {
      int const& v =
        o.link;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.link_value,
        is_null,
        v);
      i.link_null = is_null;
    }

    // dir
    //
    {
      int const& v =
        o.dir;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.dir_value,
        is_null,
        v);
      i.dir_null = is_null;
    }

    // lane
    //
    {
      int const& v =
        o.lane;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.lane_value,
        is_null,
        v);
      i.lane_null = is_null;
    }

    // offset
    //
    {
      double const& v =
        o.offset;

      bool is_null (true);
      sqlite::value_traits<
          double,
          sqlite::id_real >::set_image (
        i.offset_value,
        is_null,
        v);
      i.offset_null = is_null;
    }

    // route
    //
    {
      int const& v =
        o.route;

      bool is_null (false);
      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_image (
        i.route_value,
        is_null,
        v);
      i.route_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // auto_id
    //
    {
      long unsigned int& v =
        o.auto_id;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.auto_id_value,
        i.auto_id_null);
    }

    // hhold
    //
    {
      int& v =
        o.hhold;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.hhold_value,
        i.hhold_null);
    }

    // person
    //
    {
      int& v =
        o.person;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.person_value,
        i.person_null);
    }

    // tour
    //
    {
      int& v =
        o.tour;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.tour_value,
        i.tour_null);
    }

    // trip
    //
    {
      int& v =
        o.trip;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.trip_value,
        i.trip_null);
    }

    // mode
    //
    {
      int& v =
        o.mode;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.mode_value,
        i.mode_null);
    }

    // time
    //
    {
      double& v =
        o.time;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.time_value,
        i.time_null);
    }

    // distance
    //
    {
      double& v =
        o.distance;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.distance_value,
        i.distance_null);
    }

    // speed
    //
    {
      double& v =
        o.speed;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.speed_value,
        i.speed_null);
    }

    // link
    //
    {
      int& v =
        o.link;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.link_value,
        i.link_null);
    }

    // dir
    //
    {
      int& v =
        o.dir;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.dir_value,
        i.dir_null);
    }

    // lane
    //
    {
      int& v =
        o.lane;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.lane_value,
        i.lane_null);
    }

    // offset
    //
    {
      double& v =
        o.offset;

      sqlite::value_traits<
          double,
          sqlite::id_real >::set_value (
        v,
        i.offset_value,
        i.offset_null);
    }

    // route
    //
    {
      int& v =
        o.route;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.route_value,
        i.route_null);
    }
  }

  void access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::container_statement_cache_type
  {
    container_statement_cache_type (
      sqlite::connection&,
      sqlite::binding&)
    {
    }
  };

  const char access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Traveler\" ("
  "\"auto_id\","
  "\"hhold\","
  "\"person\","
  "\"tour\","
  "\"trip\","
  "\"mode\","
  "\"time\","
  "\"distance\","
  "\"speed\","
  "\"link\","
  "\"dir\","
  "\"lane\","
  "\"offset\","
  "\"route\")"
  " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Traveler\".\"auto_id\","
  "\"Traveler\".\"hhold\","
  "\"Traveler\".\"person\","
  "\"Traveler\".\"tour\","
  "\"Traveler\".\"trip\","
  "\"Traveler\".\"mode\","
  "\"Traveler\".\"time\","
  "\"Traveler\".\"distance\","
  "\"Traveler\".\"speed\","
  "\"Traveler\".\"link\","
  "\"Traveler\".\"dir\","
  "\"Traveler\".\"lane\","
  "\"Traveler\".\"offset\","
  "\"Traveler\".\"route\""
  " FROM \"Traveler\""
  " WHERE \"Traveler\".\"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::update_statement[] =
  "UPDATE \"Traveler\" SET "
  "\"hhold\"=?,"
  "\"person\"=?,"
  "\"tour\"=?,"
  "\"trip\"=?,"
  "\"mode\"=?,"
  "\"time\"=?,"
  "\"distance\"=?,"
  "\"speed\"=?,"
  "\"link\"=?,"
  "\"dir\"=?,"
  "\"lane\"=?,"
  "\"offset\"=?,"
  "\"route\"=?"
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Traveler\""
  " WHERE \"auto_id\"=?";

  const char access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Traveler\".\"auto_id\","
  "\"Traveler\".\"hhold\","
  "\"Traveler\".\"person\","
  "\"Traveler\".\"tour\","
  "\"Traveler\".\"trip\","
  "\"Traveler\".\"mode\","
  "\"Traveler\".\"time\","
  "\"Traveler\".\"distance\","
  "\"Traveler\".\"speed\","
  "\"Traveler\".\"link\","
  "\"Traveler\".\"dir\","
  "\"Traveler\".\"lane\","
  "\"Traveler\".\"offset\","
  "\"Traveler\".\"route\""
  " FROM \"Traveler\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Traveler\""
  " ";

  const char access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::table_name[] =
  "\"Traveler\"";

  void access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.auto_id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.auto_id = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    callback (db, obj, callback_event::pre_update);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.auto_id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::pointer_type
  access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.auto_id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::object_type >
  access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"Traveler\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Traveler\" (\n"
                      "  \"auto_id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"hhold\" INTEGER NOT NULL,\n"
                      "  \"person\" INTEGER NOT NULL,\n"
                      "  \"tour\" INTEGER NOT NULL,\n"
                      "  \"trip\" INTEGER NOT NULL,\n"
                      "  \"mode\" INTEGER NOT NULL,\n"
                      "  \"time\" REAL,\n"
                      "  \"distance\" REAL,\n"
                      "  \"speed\" REAL,\n"
                      "  \"link\" INTEGER NOT NULL,\n"
                      "  \"dir\" INTEGER NOT NULL,\n"
                      "  \"lane\" INTEGER NOT NULL,\n"
                      "  \"offset\" REAL,\n"
                      "  \"route\" INTEGER NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_polaris_io_Traveler_ (
    id_sqlite,
    "Demand",
    &access::object_traits_impl< ::polaris::io::Traveler, id_sqlite >::create_schema);
}

#include <odb/post.hxx>
